<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Coding Chain]]></title>
  <subtitle><![CDATA[通往架构师的路上]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.chen777.com/"/>
  <updated>2016-04-25T03:38:01.327Z</updated>
  <id>http://blog.chen777.com/</id>
  
  <author>
    <name><![CDATA[Xixi Chain]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[微信刷卡支付以及扫码支付]]></title>
    <link href="http://blog.chen777.com/2016/04/25/%E5%BE%AE%E4%BF%A1%E5%88%B7%E5%8D%A1%E6%94%AF%E4%BB%98%E4%BB%A5%E5%8F%8A%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98/"/>
    <id>http://blog.chen777.com/2016/04/25/微信刷卡支付以及扫码支付/</id>
    <published>2016-04-25T03:03:15.000Z</published>
    <updated>2016-04-25T03:38:01.327Z</updated>
    <content type="html"><![CDATA[<pre><code>微信刷卡支付以及扫码支付
</code></pre><h1 id="一、微信刷卡支付">一、微信刷卡支付</h1><h2 id="1、场景介绍">1、场景介绍</h2><p>步骤1：用户选择刷卡支付付款并打开微信，进入“我”-&gt;“钱包”-&gt;“刷卡”条码界面；<br>步骤2：收银员在商户系统操作生成支付订单，用户确认支付金额；<br>步骤3：商户收银员用扫码设备扫描用户的条码/二维码，商户收银系统提交支付；<br>步骤4：微信支付后台系统收到支付请求，根据验证密码规则判断是否验证用户的支付密码，不需要验证密码的交易直接发起扣款，需要验证密码的交易会弹出密码输入框。支付成功后微信端会弹出成功页面，支付失败会弹出错误提示。（注：用户刷卡条形码规则：18位纯数字，以11、12、13、14、15开头）</p>
<p><img src="http://ww2.sinaimg.cn/large/0063lLoQgw1f38sgeciksj30ro0n8tci.jpg" alt="http://ww2.sinaimg.cn/large/0063lLoQgw1f38sgeciksj30ro0n8tci.jpg"> </p>
<p><img src="http://ww1.sinaimg.cn/large/0063lLoQgw1f38shlhywmj30rv0o6n0p.jpg" alt="支付成功后页面提示"></p>
<h2 id="2、接入模式">2、接入模式</h2><p>刷卡支付接入模式可分为：商户后台接入和门店接入；商户后台接入模式适合具备统一后台系统的商户。门店收银台与商户后台通信，商户后台系统负责与微信支付系统发送交易请求和接收返回结果。</p>
<p><img src="http://ww1.sinaimg.cn/large/0063lLoQgw1f38rxc357pj30ef05974y.jpg" alt="http://ww1.sinaimg.cn/large/0063lLoQgw1f38rxc357pj30ef05974y.jpg"></p>
<h2 id="3、流程说明">3、流程说明</h2><p>（1）收银员在商户收银台生成支付订单，向用户展示支付金额；<br>（2）用户打开微信客户端，点击“我的钱包”，选择“刷卡”，进入条码界面；<br>（3）使用扫码设备读取用户手机屏幕上的条码；<br>（4）扫码设备将读取的信息上传给门店收银台；<br>（5）门店收银台得到支付信息后，向商户收银后台发起支付请求。<br>（6）商户后台对门店收银台的支付请求进行处理，生成签名后调用【提交刷卡支付API】向微信支付系统发起支付请求。<br>（7）微信支付系统得到商户侧的支付请求之后会对请求进行验证，验证通过之后会对请求数据进行处理，最后将处理后的支付结果返回给商户收银后台。如果支付成功，微信支付系统会将支付结果返回给商户，同时把支付结果通知给用户（以短信、微信消息的形式通知）。<br>（8）商户收银后台对得到的支付结果进行签名验证和处理，再将支付结果返回给门店收银台。<br>（9）收银员看到门店收银台的支付结果后给用户发货。</p>
<h2 id="4、异常处理">4、异常处理</h2><p>用户遇到支付异常，请按如下说明处理<br>（1）用户微信端弹出系统错误提示框，用户可在交易列表查看交易情况，如果未找到订单，需要商户重新发起支付交易；如果订单显示成功支付，商户收银系统再次调用【<a href="https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=9_2" target="_blank" rel="external">查询订单API</a>】查询实际支付结果；<br>（2）用户微信端弹出支付失败提示，例如：余额不足，信用卡失效。需要重新发起支付；<br>（3）当交易超时或支付交易失败，商户收银系统必须调用【<a href="https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=9_11" target="_blank" rel="external">撤销订单API</a>】，撤销此交易。<br>（4）由于银行系统异常、用户余额不足、不支持用户卡种等原因使当前支付交易失败，商户收银系统应该把错误提示明确展示给收银员。<br><br>（5）根据返回的错误码，判断是否需要撤销交易，具体详见API返回错误码列表 </p>
<h2 id="5、Demo下载">5、Demo下载</h2><p><a href="https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=11_1" target="_blank" rel="external">Demo下载</a></p>
<h1 id="二、扫码支付">二、扫码支付</h1><h2 id="场景介绍">场景介绍</h2><p>用户扫描商户展示在各种场景的二维码进行支付。<br>步骤1：商户根据微信支付的规则，为不同商品生成不同的二维码，展示在各种场景，用于用户扫描购买。<br>步骤2：用户使用微信“扫一扫”（如图）扫描二维码后，获取商品支付信息，引导用户完成支付（如图6.3）。<br>步骤3：用户确认支付，输入支付密码（如图6.4）。<br>步骤4：支付完成后会提示用户支付成功（如图6.5），商户后台得到支付成功的通知，然后进行发货处理。</p>
<p><img src="http://ww2.sinaimg.cn/large/0063lLoQgw1f38s6b2dhfj315b10bjw4.jpg" alt="图6.3"><br><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1f38s8jx211j314o0zodmp.jpg" alt="图6.4"></p>
<p>商户后台系统先调用微信支付的统一下单接口，微信后台系统返回链接参数code_url，商户后台系统将code_url值生成二维码图片，用户使用微信客户端扫码后发起支付。注意：code_url有效期为2小时，过期后扫码不能再发起支付。</p>
<h2 id="业务流程说明：">业务流程说明：</h2><p>（1）商户后台系统根据用户选购的商品生成订单。<br>（2）用户确认支付后调用微信支付【<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1" target="_blank" rel="external">统一下单API</a>】生成预支付交易；<br>（3）微信支付系统收到请求后生成预支付交易单，并返回交易会话的二维码链接code_url。<br>（4）商户后台系统根据返回的code_url生成二维码。<br>（5）用户打开微信“扫一扫”扫描二维码，微信客户端将扫码内容发送到微信支付系统。<br>（6）微信支付系统收到客户端请求，验证链接有效性后发起用户支付，要求用户授权。<br>（7）用户在微信客户端输入密码，确认支付后，微信客户端提交授权。<br>（8）微信支付系统根据用户授权完成支付交易。<br>（9）微信支付系统完成支付交易后给微信客户端返回交易结果，并将交易结果通过短信、微信消息提示用户。微信客户端展示支付交易结果页面。<br>（10）微信支付系统通过发送异步消息通知商户后台系统支付结果。商户后台系统需回复接收情况，通知微信后台系统不再发送该单的支付通知。<br>（11）未收到支付通知的情况，商户后台系统调用【<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_2" target="_blank" rel="external">查询订单API</a>】。<br>（12）商户确认订单已支付后给用户发货。</p>
<h2 id="生成二维码规则">生成二维码规则</h2><p>对应链接格式：weixin：//wxpay/bizpayurl?sr=XXXXX。请商户调用第三方库将code_url生成二维码图片。该模式链接较短，生成的二维码打印到结账小票上的识别率较高。<br>例如，将weixin：//wxpay/s/An4baqw生成二维码见图6.10。</p>
<p><img src="http://ww1.sinaimg.cn/large/0063lLoQgw1f38s92gc5bj307z07r0t7.jpg" alt="图6.5"></p>
<h2 id="Demo下载">Demo下载</h2><p><a href="https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=11_1" target="_blank" rel="external">Demo下载</a></p>
<h1 id="一、支付宝的条码支付">一、支付宝的条码支付</h1><p>商户收银台与商户收银系统通信，商户后台系统向支付宝后台发送交易请求和接收返回结果，如下图所示。<br><img src="http://ww4.sinaimg.cn/large/0063lLoQgw1f38sb0ioz0j30jx08gjsx.jpg" alt="http://ww4.sinaimg.cn/large/0063lLoQgw1f38sb0ioz0j30jx08gjsx.jpg"></p>
<p>支付宝扫码支付<br>显示二维码的商户收银终端<br>在商户收银终端，通常采用双屏显示器给用户显示二维码，或将打印出的二维码信息直接张贴出来供用户扫描。<br>已安装有支付宝钱包客户端的智能移动设备，包括支持iOS、Android、Windows Phone系统的手机、PAD等扫描该二维码完成支付。</p>
<p>图1 双屏收银台（显示二维码）    图2 可打印二维码的POS终端</p>
<p><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1f38sc2sezdj302v02w0sl.jpg" alt="http://ww3.sinaimg.cn/large/0063lLoQgw1f38sc2sezdj302v02w0sl.jpg"><br><img src="http://ww2.sinaimg.cn/large/0063lLoQgw1f38scd2il2j303302zjr9.jpg" alt="http://ww2.sinaimg.cn/large/0063lLoQgw1f38scd2il2j303302zjr9.jpg"></p>
]]></content>
    <summary type="html">
    <![CDATA[<pre><code>微信刷卡支付以及扫码支付
</code></pre><h1 id="一、微信刷卡支付">一、微信刷卡支付</h1><h2 id="1、场景介绍">1、场景介绍</h2><p>步骤1：用户选择刷卡支付付款并打开微信，进入“我”-&gt;“钱包”-&gt;“刷卡]]>
    </summary>
    
      <category term="weixin" scheme="http://blog.chen777.com/tags/weixin/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ArrayList底层学习]]></title>
    <link href="http://blog.chen777.com/2016/04/21/ArrayList%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/"/>
    <id>http://blog.chen777.com/2016/04/21/ArrayList底层学习/</id>
    <published>2016-04-21T03:38:21.000Z</published>
    <updated>2016-04-21T06:36:48.615Z</updated>
    <content type="html"><![CDATA[<h1 id="ArrayList概述：">ArrayList概述：</h1><ul>
<li><p>ArrayList是基于数组实现的，是一个动态数组，其容量能自动增长，类似于C语言中的动态申请内存，动态增长内存。</p>
</li>
<li><p>ArrayList不是线程安全的，只能用在单线程环境下，多线程环境下可以考虑用Collections.synchronizedList(List l)函数返回一个线程安全的ArrayList类，也可以使用concurrent并发包下的CopyOnWriteArrayList类。</p>
</li>
<li><p>ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了RandomAccess接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了Cloneable接口，能被克隆。</p>
</li>
<li><p>每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。它总是至少等于列表的大小。随着向ArrayList中不断添加元素，其容量也自动增长。自动增长会带来数据向新数组的重新拷贝，因此，如果可预知数据量的多少，可在构造ArrayList时指定其容量。在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。 注意，此实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。</p>
</li>
</ul>
<h2 id="ArrayList的实现：">ArrayList的实现：</h2><p>对于ArrayList而言，它实现List接口、底层使用数组保存所有元素。其操作基本上是对数组的操作。下面我们来分析ArrayList的源代码：</p>
<h3 id="私有属性：">私有属性：</h3><pre><code>ArrayList定义只定义类两个私有属性：

    /** 
       * The<span class="instruction"> array </span>buffer into which the elements of the ArrayList are stored. 
       * The capacity of the ArrayList is the length of this<span class="instruction"> array </span>buffer. 
      */  
    <span class="keyword"> private</span><span class="keyword"> transient</span> Object<span class="keyword">[</span>] elementData;  

     /** 
      * The size of the ArrayList<span class="function"> (</span>the number of elements it contains<span class="function">)</span>. 
      * 
      * @serial 
      */  
    <span class="keyword"> private</span><span class="instruction"> int </span>size;
</code></pre><p>很容易理解，elementData存储ArrayList内的元素，size表示它包含的元素的数量。</p>
<p>有个关键字需要解释：transient。  </p>
<p>Java的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。<br>被标记为transient的属性在对象被序列化的时候不会被保存。<br>*</p>
<h3 id="构造方法：">构造方法：</h3><p>   ArrayList提供了三种方式的构造器，可以构造一个默认初始容量为10的空列表、构造一个指定初始容量的空列表以及构造一个包含指定collection的元素的列表，这些元素按照该collection的迭代器返回它们的顺序排列的。</p>
<pre><code><span class="comment">// ArrayList带容量大小的构造函数。    </span>
<span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>{    
    super();    
    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)    
        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+    
                                           initialCapacity);    
    <span class="comment">// 新建一个数组    </span>
    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];    
}    

<span class="comment">// ArrayList无参构造函数。默认容量是10。    </span>
<span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>{    
    <span class="keyword">this</span>(<span class="number">10</span>);    
}    

<span class="comment">// 创建一个包含collection的ArrayList    </span>
<span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>{    
    elementData = c.toArray();    
    size = elementData.length;    
    <span class="keyword">if</span> (elementData.getClass() != Object[].<span class="keyword">class</span>)    
        elementData = Arrays.copyOf(elementData, size, Object[].<span class="keyword">class</span>);    
}
</code></pre><h3 id="元素存储：">元素存储：</h3><p>   ArrayList提供了set(int index, E element)、add(E e)、add(int index, E element)、addAll(Collection&lt;? extends E&gt; c)、addAll(int index, Collection&lt;? extends E&gt; c)这些添加元素的方法。</p>
<pre><code><span class="comment">// 用指定的元素替代此列表中指定位置上的元素，并返回以前位于该位置上的元素。  </span>
<span class="keyword">public</span> E set(<span class="keyword">int</span> <span class="keyword">index</span>, E element) {  
   RangeCheck(<span class="keyword">index</span>);  

   E oldValue = (E) elementData[<span class="keyword">index</span>];  
   elementData[<span class="keyword">index</span>] = element;  
   <span class="keyword">return</span> oldValue;  
}    
<span class="comment">// 将指定的元素添加到此列表的尾部。  </span>
<span class="keyword">public</span> <span class="keyword">boolean</span> add(E e) {  
   ensureCapacity(size + <span class="number">1</span>);   
   elementData[size++] = e;  
   <span class="keyword">return</span> <span class="keyword">true</span>;  
}    
<span class="comment">// 将指定的元素插入此列表中的指定位置。  </span>
<span class="comment">// 如果当前位置有元素，则向右移动当前位于该位置的元素以及所有后续元素（将其索引加1）。  </span>
<span class="keyword">public</span> <span class="keyword">void</span> add(<span class="keyword">int</span> <span class="keyword">index</span>, E element) {  
   <span class="keyword">if</span> (<span class="keyword">index</span> &gt; size || <span class="keyword">index</span> &lt; <span class="number">0</span>)  
       <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+<span class="keyword">index</span>+<span class="string">", Size: "</span>+size);  
   <span class="comment">// 如果数组长度不足，将进行扩容。  </span>
   ensureCapacity(size+<span class="number">1</span>);  <span class="comment">// Increments modCount!!  </span>
   <span class="comment">// 将 elementData中从Index位置开始、长度为size-index的元素，  </span>
   <span class="comment">// 拷贝到从下标为index+1位置开始的新的elementData数组中。  </span>
   <span class="comment">// 即将当前位于该位置的元素以及所有后续元素右移一个位置。  </span>
   System.arraycopy(elementData, <span class="keyword">index</span>, elementData, <span class="keyword">index</span> + <span class="number">1</span>, size - <span class="keyword">index</span>);  
   elementData[<span class="keyword">index</span>] = element;  
   size++;  
}    
<span class="comment">// 按照指定collection的迭代器所返回的元素顺序，将该collection中的所有元素添加到此列表的尾部。  </span>
<span class="keyword">public</span> <span class="keyword">boolean</span> addAll(Collection&lt;? extends E&gt; c) {  
   Object[] a = c.toArray();  
   <span class="keyword">int</span> numNew = a.length;  
   ensureCapacity(size + numNew);  <span class="comment">// Increments modCount  </span>
   System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);  
   size += numNew;  
   <span class="keyword">return</span> numNew != <span class="number">0</span>;  
}    
<span class="comment">// 从指定的位置开始，将指定collection中的所有元素插入到此列表中。  </span>
<span class="keyword">public</span> <span class="keyword">boolean</span> addAll(<span class="keyword">int</span> <span class="keyword">index</span>, Collection&lt;? extends E&gt; c) {  
   <span class="keyword">if</span> (<span class="keyword">index</span> &gt; size || <span class="keyword">index</span> &lt; <span class="number">0</span>)  
       <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(  
           <span class="string">"Index: "</span> + <span class="keyword">index</span> + <span class="string">", Size: "</span> + size);  

   Object[] a = c.toArray();  
   <span class="keyword">int</span> numNew = a.length;  
   ensureCapacity(size + numNew);  <span class="comment">// Increments modCount  </span>

   <span class="keyword">int</span> numMoved = size - <span class="keyword">index</span>;  
   <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)  
       System.arraycopy(elementData, <span class="keyword">index</span>, elementData, <span class="keyword">index</span> + numNew, numMoved);  

   System.arraycopy(a, <span class="number">0</span>, elementData, <span class="keyword">index</span>, numNew);  
   size += numNew;  
   <span class="keyword">return</span> numNew != <span class="number">0</span>;  
   }
</code></pre><p>书上都说ArrayList是基于数组实现的，属性中也看到了数组，具体是怎么实现的呢？比如就这个添加元素的方法，如果数组大，则在将某个位置的值设置为指定元素即可，如果数组容量不够了呢？<br>看到add(E e)中先调用了ensureCapacity(size+1)方法，之后将元素的索引赋给elementData[size]，而后size自增。例如初次添加时，size为0，add将elementData[0]赋值为e，然后size设置为1（类似执行以下两条语句elementData[0]=e;size=1）。将元素的索引赋给elementData[size]不是会出现数组越界的情况吗？这里关键就在ensureCapacity(size+1)中了。</p>
<h3 id="元素读取：">元素读取：</h3><pre><code><span class="comment">// 返回此列表中指定位置上的元素。  </span>
 <span class="keyword">public</span> E get(<span class="keyword">int</span> <span class="keyword">index</span>) {  
    RangeCheck(<span class="keyword">index</span>);  

    <span class="keyword">return</span> (E) elementData[<span class="keyword">index</span>];  
  }
</code></pre><h3 id="元素删除：">元素删除：</h3><p>ArrayList提供了根据下标或者指定对象两种方式的删除功能。如下：<br>romove(int index):</p>
<pre><code><span class="comment">// 移除此列表中指定位置上的元素。  </span>
 <span class="keyword">public</span> E remove(<span class="keyword">int</span> <span class="keyword">index</span>) {  
    RangeCheck(<span class="keyword">index</span>);  

    modCount++;  
    E oldValue = (E) elementData[<span class="keyword">index</span>];  

    <span class="keyword">int</span> numMoved = size - <span class="keyword">index</span> - <span class="number">1</span>;  
    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)  
        System.arraycopy(elementData, <span class="keyword">index</span>+<span class="number">1</span>, elementData, <span class="keyword">index</span>, numMoved);  
    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work  </span>

    <span class="keyword">return</span> oldValue;  
 }
</code></pre><p> 首先是检查范围，修改modCount，保留将要被移除的元素，将移除位置之后的元素向前挪动一个位置，将list末尾元素置空（null），返回被移除的元素。</p>
<p>remove(Object o)</p>
<pre><code><span class="comment">// 移除此列表中首次出现的指定元素（如果存在）。这是应为ArrayList中允许存放重复的元素。  </span>
 <span class="keyword">public</span> <span class="keyword">boolean</span> remove(Object o) {  
    <span class="comment">// 由于ArrayList中允许存放null，因此下面通过两种情况来分别处理。  </span>
    <span class="keyword">if</span> (o == <span class="keyword">null</span>) {  
        <span class="keyword">for</span> (<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; size; <span class="keyword">index</span>++)  
            <span class="keyword">if</span> (elementData[<span class="keyword">index</span>] == <span class="keyword">null</span>) {  
                <span class="comment">// 类似remove(int index)，移除列表中指定位置上的元素。  </span>
                fastRemove(<span class="keyword">index</span>);  
                <span class="keyword">return</span> <span class="keyword">true</span>;  
            }  
    } <span class="keyword">else</span> {  
        <span class="keyword">for</span> (<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; size; <span class="keyword">index</span>++)  
            <span class="keyword">if</span> (o.equals(elementData[<span class="keyword">index</span>])) {  
                fastRemove(<span class="keyword">index</span>);  
                <span class="keyword">return</span> <span class="keyword">true</span>;  
            }  
        }  
        <span class="keyword">return</span> <span class="keyword">false</span>;  
    } 
}
</code></pre><p>首先通过代码可以看到，当移除成功后返回true，否则返回false。remove(Object o)中通过遍历element寻找是否存在传入对象，一旦找到就调用fastRemove移除对象。为什么找到了元素就知道了index，不通过remove(index)来移除元素呢？因为fastRemove跳过了判断边界的处理，因为找到元素就相当于确定了index不会超过边界，而且fastRemove并不返回被移除的元素。下面是fastRemove的代码，基本和remove(index)一致。</p>
<pre><code><span class="keyword">private</span> void fastRemove(<span class="built_in">int</span> <span class="built_in">index</span>) {  
         modCount++;  
         <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - <span class="built_in">index</span> - <span class="number">1</span>;  
         <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)  
             System.arraycopy(elementData, <span class="built_in">index</span>+<span class="number">1</span>, elementData, <span class="built_in">index</span>,  
                              numMoved);  
         elementData[--<span class="built_in">size</span>] = null; // Let gc <span class="keyword">do</span> its work  
 }


<span class="keyword">protected</span> void removeRange(<span class="built_in">int</span> fromIndex, <span class="built_in">int</span> toIndex) {  
     modCount++;  
     <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - toIndex;  
         System.arraycopy(elementData, toIndex, elementData, fromIndex,  
                          numMoved);  

     // Let gc <span class="keyword">do</span> its work  
     <span class="built_in">int</span> newSize = <span class="built_in">size</span> - (toIndex-fromIndex);  
     <span class="keyword">while</span> (<span class="built_in">size</span> <span class="comment">!= newSize)  </span>
         elementData[--<span class="built_in">size</span>] = null;  
}
</code></pre><p>执行过程是将elementData从toIndex位置开始的元素向前移动到fromIndex，然后将toIndex位置之后的元素全部置空顺便修改size。</p>
<p>这个方法是protected，及受保护的方法，为什么这个方法被定义为protected呢？</p>
<p>这是一个解释，但是可能不容易看明白。<a href="http://stackoverflow.com/questions/2289183/why-is-javas-abstractlists-removerange-method-protected" target="_blank" rel="external">http://stackoverflow.com/questions/2289183/why-is-javas-abstractlists-removerange-method-protected</a></p>
<h3 id="调整数组容量ensureCapacity：">调整数组容量ensureCapacity：</h3><p> 从上面介绍的向ArrayList中存储元素的代码中，我们看到，每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容通过一个公开的方法ensureCapacity(int minCapacity)来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。</p>
<pre><code><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{  
    modCount++;  
    <span class="keyword">int</span> oldCapacity = elementData.length;  
    <span class="keyword">if</span> (minCapacity &gt; oldCapacity) {  
        Object oldData[] = elementData;  
        <span class="keyword">int</span> newCapacity = (oldCapacity * <span class="number">3</span>)/<span class="number">2</span> + <span class="number">1</span>;  <span class="comment">//增加50%+1</span>
            <span class="keyword">if</span> (newCapacity &lt; minCapacity)  
                newCapacity = minCapacity;  
      <span class="comment">// minCapacity is usually close to size, so this is a win:  </span>
      elementData = Arrays.copyOf(elementData, newCapacity);  
    }  
 }
</code></pre><p>从上述代码中可以看出，数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。</p>
<p>Object oldData[] = elementData;//为什么要用到oldData[]<br>乍一看来后面并没有用到关于oldData， 这句话显得多此一举！但是这是一个牵涉到内存管理的类， 所以要了解内部的问题。 而且为什么这一句还在if的内部，这跟elementData = Arrays.copyOf(elementData, newCapacity); 这句是有关系的，下面这句Arrays.copyOf的实现时新创建了newCapacity大小的内存，然后把老的elementData放入。好像也没有用到oldData，有什么问题呢。问题就在于旧的内存的引用是elementData， elementData指向了新的内存块，如果有一个局部变量oldData变量引用旧的内存块的话，在copy的过程中就会比较安全，因为这样证明这块老的内存依然有引用，分配内存的时候就不会被侵占掉，然后copy完成后这个局部变量的生命期也过去了，然后释放才是安全的。不然在copy的的时候万一新的内存或其他线程的分配内存侵占了这块老的内存，而copy还没有结束，这将是个严重的事情。</p>
<h1 id="关于ArrayList和Vector区别如下：">关于ArrayList和Vector区别如下：</h1><ul>
<li>ArrayList在内存不够时默认是扩展50% + 1个，Vector是默认扩展1倍。 </li>
<li>Vector提供indexOf(obj, start)接口，ArrayList没有。 </li>
<li>Vector属于线程安全级别的，但是大多数情况下不使用Vector，因为线程安全需要更大的系统开销。 </li>
</ul>
<p>ArrayList还给我们提供了将底层数组的容量调整为当前列表保存的实际元素的大小的功能。它可以通过trimToSize方法来实现。代码如下：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">void</span> trimToSize() {  
       modCount++;  
       <span class="keyword">int</span> oldCapacity = elementData.length;  
       <span class="keyword">if</span> (<span class="keyword">size</span> &lt; oldCapacity) {  
           elementData = Arrays.copyOf(elementData, <span class="keyword">size</span>);  
       }  
  }
</code></pre><p>由于elementData的长度会被拓展，size标记的是其中包含的元素的个数。所以会出现size很小但elementData.length很大的情况，将出现空间的浪费。trimToSize将返回一个新的数组给elementData，元素内容保持不变，length和size相同，节省空间。</p>
<h3 id="转为静态数组toArray">转为静态数组toArray</h3><p>注意ArrayList的两个转化为静态数组的toArray方法。</p>
<p>第一个， 调用Arrays.copyOf将返回一个数组，数组内容是size个elementData的元素，即拷贝elementData从0至size-1位置的元素到新数组并返回。</p>
<pre><code><span class="keyword">public</span> <span class="keyword">Object</span>[] toArray() {  
         <span class="keyword">return</span> Arrays.copyOf(elementData, <span class="built_in">size</span>);  
 } 
</code></pre><p> 第二个，如果传入数组的长度小于size，返回一个新的数组，大小为size，类型与传入数组相同。所传入数组长度与size相等，则将elementData复制到传入数组中并返回传入的数组。若传入数组长度大于size，除了复制elementData外，还将把返回数组的第size个元素置为空。</p>
<pre><code><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) {
    <span class="keyword">if</span> (a.length &lt; <span class="keyword">size</span>)
        <span class="comment">// Make a new array of a's runtime type, but my contents:</span>
        <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, <span class="keyword">size</span>, a.getClass());
System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, <span class="keyword">size</span>);
    <span class="keyword">if</span> (a.length &gt; <span class="keyword">size</span>)
        a[<span class="keyword">size</span>] = <span class="keyword">null</span>;
    <span class="keyword">return</span> a;
}
</code></pre><p>Fail-Fast机制：<br>ArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。具体介绍请参考这篇文章深入Java集合学习系列：<a href="http://zhangshixi.iteye.com/blog/672697" target="_blank" rel="external">HashMap的实现原理 中的Fail-Fast机制。    </a></p>
<p>总结:</p>
<p>关于ArrayList的源码，给出几点比较重要的总结：</p>
<p>   1、注意其三个不同的构造方法。无参构造方法构造的ArrayList的容量默认为10，带有Collection参数的构造方法，将Collection转化为数组赋给ArrayList的实现数组elementData。</p>
<p>   2、注意扩充容量的方法ensureCapacity。ArrayList在每次增加元素（可能是1个，也可能是一组）时，都要调用该方法来确保足够的容量。当容量不足以容纳当前的元素个数时，就设置新的容量为旧的容量的1.5倍加1，如果设置后的新容量还不够，则直接新容量设置为传入的参数（也就是所需的容量），而后用Arrays.copyof()方法将元素拷贝到新的数组（详见下面的第3点）。从中可以看出，当容量不够时，每次增加元素，都要将原来的元素拷贝到一个新的数组中，非常之耗时，也因此建议在事先能确定元素数量的情况下，才使用ArrayList，否则建议使用LinkedList。</p>
<p>   3、ArrayList的实现中大量地调用了Arrays.copyof()和System.arraycopy()方法。我们有必要对这两个方法的实现做下深入的了解。</p>
<p>   首先来看Arrays.copyof()方法。它有很多个重载的方法，但实现思路都是一样的，我们来看泛型版本的源码：</p>
<pre><code>public <span class="value">static</span> &lt;T&gt; T<span class="attr_selector">[]</span> <span class="function">copyOf</span>(T<span class="attr_selector">[]</span> original, int newLength) {  
        return (T<span class="attr_selector">[]</span>) <span class="function">copyOf</span>(original, newLength, original<span class="class">.getClass</span>());  
}
</code></pre><p>  很明显调用了另一个copyof方法，该方法有三个参数，最后一个参数指明要转换的数据的类型，其源码如下：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="built_in">int</span> newLength, Class&lt;? extends T[]&gt; newType) {  
    T[] <span class="built_in">copy</span> = ((<span class="keyword">Object</span>)newType == (<span class="keyword">Object</span>)<span class="keyword">Object</span>[].class)  
        ? (T[]) <span class="keyword">new</span> <span class="keyword">Object</span>[newLength]  
        : (T[]) <span class="keyword">Array</span>.newInstance(newType.getComponentType(), newLength);  
    System.arraycopy(original, <span class="number">0</span>, <span class="built_in">copy</span>, <span class="number">0</span>,  
                     Math.<span class="built_in">min</span>(original.length, newLength));  
    <span class="keyword">return</span> <span class="built_in">copy</span>;  
}
</code></pre><p>这里可以很明显地看出，该方法实际上是在其内部又创建了一个长度为newlength的数组，调用System.arraycopy()方法，将原来数组中的元素复制到了新的数组中。</p>
<p>下面来看System.arraycopy()方法。该方法被标记了native，调用了系统的C/C++代码，在JDK中是看不到的，但在openJDK中可以看到其源码。该函数实际上最终调用了C语言的memmove()函数，因此它可以保证同一个数组内元素的正确复制和移动，比一般的复制方法的实现效率要高很多，很适合用来批量处理数组。Java强烈推荐在复制大量数组元素时用该方法，以取得更高的效率。</p>
<p>4、ArrayList基于数组实现，可以通过下标索引直接查找到指定位置的元素，因此查找效率高，但每次插入或删除元素，就要大量地移动元素，插入删除元素的效率低。</p>
<p>5、在查找给定元素索引值等的方法中，源码都将该元素的值分为null和不为null两种情况处理，ArrayList中允许元素为null。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="ArrayList概述：">ArrayList概述：</h1><ul>
<li><p>ArrayList是基于数组实现的，是一个动态数组，其容量能自动增长，类似于C语言中的动态申请内存，动态增长内存。</p>
</li>
<li><p>ArrayList不是线程安]]>
    </summary>
    
      <category term="源码学习" scheme="http://blog.chen777.com/tags/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[动态添加JOB]]></title>
    <link href="http://blog.chen777.com/2016/04/01/%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0JOB/"/>
    <id>http://blog.chen777.com/2016/04/01/动态添加JOB/</id>
    <published>2016-04-01T01:05:37.000Z</published>
    <updated>2016-04-01T01:32:59.408Z</updated>
    <content type="html"><![CDATA[<p>前面一节讲了用spring+quartz 定时调度，这个能满足大多数需求，但是有一些动态的JOB，该如何处理。我大概讲一下我的思路：</p>
<p>首先创建JOB表，启动一个定时调度(上节写了)扫描这个表有没有新增的记录(status=0的记录),如果有就往quartz里面添加job然后修改t_job的status</p>
<pre><code><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_job`</span> (
  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,
  <span class="string">`create_date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULl</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,
  <span class="string">`modify_date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'修改时间'</span>,
  <span class="string">`job_name`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'job名称'</span>,
  <span class="string">`class`</span> <span class="built_in">varchar</span>(<span class="number">255</span>)<span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'触发类'</span>,
  <span class="string">`trigger_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'触发时间'</span>,
  <span class="string">`begin_date`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'开始时间'</span>,
  <span class="string">`end_date`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="string">'结束时间'</span>,
  <span class="string">`status`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="string">'状态：0未开启,1开启'</span>,
  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),
) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">26</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span>


<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> t_job <span class="keyword">where</span> <span class="keyword">status</span> =<span class="string">'0'</span>返回<span class="keyword">List</span>，然后添加JOB。</span>
</code></pre><p>QuartzManage.java</p>
<pre><code><span class="comment">/** 
 * <span class="doctag">@Description</span>:  
 * 
 * <span class="doctag">@Title</span>: QuartzManager.java 
 * <span class="doctag">@Package</span> com.joyce.quartz 
 * <span class="doctag">@Copyright</span>: Copyright (c) 2014 
 */</span>  

<span class="keyword">import</span> org.quartz.CronTrigger;  
<span class="keyword">import</span> org.quartz.JobDetail;  
<span class="keyword">import</span> org.quartz.Scheduler;  
<span class="keyword">import</span> org.quartz.SchedulerFactory;  
<span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;  

<span class="comment">/** 
 * <span class="doctag">@Description</span>: 定时任务管理类 
 *  
 * <span class="doctag">@ClassName</span>: QuartzManager 
 */</span>  
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzManager</span> </span>{  
    <span class="keyword">private</span> <span class="keyword">static</span> SchedulerFactory gSchedulerFactory = <span class="keyword">new</span> StdSchedulerFactory();  
    <span class="keyword">private</span> <span class="keyword">static</span> String JOB_GROUP_NAME = <span class="string">"EXTJWEB_JOBGROUP_NAME"</span>;  
    <span class="keyword">private</span> <span class="keyword">static</span> String TRIGGER_GROUP_NAME = <span class="string">"EXTJWEB_TRIGGERGROUP_NAME"</span>;  

    <span class="comment">/** 
     * <span class="doctag">@Description</span>: 添加一个定时任务，使用默认的任务组名，触发器名，触发器组名 
     *  
     * <span class="doctag">@param</span> jobName 
     *            任务名 
     * <span class="doctag">@param</span> cls 
     *            任务 
     * <span class="doctag">@param</span> time 
     *            时间设置，参考quartz说明文档 
     *  
     * <span class="doctag">@Title</span>: QuartzManager.java 
     * <span class="doctag">@Copyright</span>: Copyright (c) 2014 
     */</span>  
    <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(String jobName, Class cls, String time)</span> </span>{  
        <span class="keyword">try</span> {  
            Scheduler sched = gSchedulerFactory.getScheduler();  
            JobDetail jobDetail = <span class="keyword">new</span> JobDetail(jobName, JOB_GROUP_NAME, cls);<span class="comment">// 任务名，任务组，任务执行类  </span>
            <span class="comment">// 触发器  </span>
            CronTrigger trigger = <span class="keyword">new</span> CronTrigger(jobName, TRIGGER_GROUP_NAME);<span class="comment">// 触发器名,触发器组  </span>
            trigger.setCronExpression(time);<span class="comment">// 触发器时间设定  </span>
            sched.scheduleJob(jobDetail, trigger);  
            <span class="comment">// 启动  </span>
            <span class="keyword">if</span> (!sched.isShutdown()) {  
                sched.start();  
            }  
        } <span class="keyword">catch</span> (Exception e) {  
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);  
        }  
    }  

    <span class="comment">/** 
     * <span class="doctag">@Description</span>: 添加一个定时任务 
     *  
     * <span class="doctag">@param</span> jobName 
     *            任务名 
     * <span class="doctag">@param</span> jobGroupName 
     *            任务组名 
     * <span class="doctag">@param</span> triggerName 
     *            触发器名 
     * <span class="doctag">@param</span> triggerGroupName 
     *            触发器组名 
     * <span class="doctag">@param</span> jobClass 
     *            任务 
     * <span class="doctag">@param</span> time 
     *            时间设置，参考quartz说明文档 
     *  
     * <span class="doctag">@Title</span>: QuartzManager.java 
     * <span class="doctag">@Copyright</span>: Copyright (c) 2014 
     */</span>  
    <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(String jobName, String jobGroupName,  
            String triggerName, String triggerGroupName, Class jobClass,  
            String time)</span> </span>{  
        <span class="keyword">try</span> {  
            Scheduler sched = gSchedulerFactory.getScheduler();  
            JobDetail jobDetail = <span class="keyword">new</span> JobDetail(jobName, jobGroupName, jobClass);<span class="comment">// 任务名，任务组，任务执行类  </span>
            <span class="comment">// 触发器  </span>
            CronTrigger trigger = <span class="keyword">new</span> CronTrigger(triggerName, triggerGroupName);<span class="comment">// 触发器名,触发器组  </span>
            trigger.setCronExpression(time);<span class="comment">// 触发器时间设定  </span>
            sched.scheduleJob(jobDetail, trigger);  
        } <span class="keyword">catch</span> (Exception e) {  
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);  
        }  
    }  

    <span class="comment">/** 
     * <span class="doctag">@Description</span>: 修改一个任务的触发时间(使用默认的任务组名，触发器名，触发器组名) 
     *  
     * <span class="doctag">@param</span> jobName 
     * <span class="doctag">@param</span> time 
     *  
     * <span class="doctag">@Title</span>: QuartzManager.java 
     */</span>  
    <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyJobTime</span><span class="params">(String jobName, String time)</span> </span>{  
        <span class="keyword">try</span> {  
            Scheduler sched = gSchedulerFactory.getScheduler();  
            CronTrigger trigger = (CronTrigger) sched.getTrigger(jobName,TRIGGER_GROUP_NAME);  
            <span class="keyword">if</span> (trigger == <span class="keyword">null</span>) {  
                <span class="keyword">return</span>;  
            }  
            String oldTime = trigger.getCronExpression();  
            <span class="keyword">if</span> (!oldTime.equalsIgnoreCase(time)) {  
                JobDetail jobDetail = sched.getJobDetail(jobName,JOB_GROUP_NAME);  
                Class objJobClass = jobDetail.getJobClass();  
                removeJob(jobName);  
                addJob(jobName, objJobClass, time);  
            }  
        } <span class="keyword">catch</span> (Exception e) {  
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);  
        }  
    }  

    <span class="comment">/** 
     * <span class="doctag">@Description</span>: 修改一个任务的触发时间 
     *  
     * <span class="doctag">@param</span> triggerName 
     * <span class="doctag">@param</span> triggerGroupName 
     * <span class="doctag">@param</span> time 
     *  
     * <span class="doctag">@Title</span>: QuartzManager.java 
     */</span>  
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyJobTime</span><span class="params">(String triggerName,  
            String triggerGroupName, String time)</span> </span>{  
        <span class="keyword">try</span> {  
            Scheduler sched = gSchedulerFactory.getScheduler();  
            CronTrigger trigger = (CronTrigger) sched.getTrigger(triggerName,triggerGroupName);  
            <span class="keyword">if</span> (trigger == <span class="keyword">null</span>) {  
                <span class="keyword">return</span>;  
            }  
            String oldTime = trigger.getCronExpression();  
            <span class="keyword">if</span> (!oldTime.equalsIgnoreCase(time)) {  
                CronTrigger ct = (CronTrigger) trigger;  
                <span class="comment">// 修改时间  </span>
                ct.setCronExpression(time);  
                <span class="comment">// 重启触发器  </span>
                sched.resumeTrigger(triggerName, triggerGroupName);  
            }  
        } <span class="keyword">catch</span> (Exception e) {  
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);  
        }  
    }  

    <span class="comment">/** 
     * <span class="doctag">@Description</span>: 移除一个任务(使用默认的任务组名，触发器名，触发器组名) 
     *  
     * <span class="doctag">@param</span> jobName 
     * <span class="doctag">@Title</span>: QuartzManager.java 
     */</span>  
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeJob</span><span class="params">(String jobName)</span> </span>{  
        <span class="keyword">try</span> {  
            Scheduler sched = gSchedulerFactory.getScheduler();  
            sched.pauseTrigger(jobName, TRIGGER_GROUP_NAME);<span class="comment">// 停止触发器  </span>
            sched.unscheduleJob(jobName, TRIGGER_GROUP_NAME);<span class="comment">// 移除触发器  </span>
            sched.deleteJob(jobName, JOB_GROUP_NAME);<span class="comment">// 删除任务  </span>
        } <span class="keyword">catch</span> (Exception e) {  
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);  
        }  
    }  

    <span class="comment">/** 
     * <span class="doctag">@Description</span>: 移除一个任务 
     *  
     * <span class="doctag">@param</span> jobName 
     * <span class="doctag">@param</span> jobGroupName 
     * <span class="doctag">@param</span> triggerName 
     * <span class="doctag">@param</span> triggerGroupName 
     *  
     * <span class="doctag">@Title</span>: QuartzManager.java 
     */</span>  
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeJob</span><span class="params">(String jobName, String jobGroupName,  
            String triggerName, String triggerGroupName)</span> </span>{  
        <span class="keyword">try</span> {  
            Scheduler sched = gSchedulerFactory.getScheduler();  
            sched.pauseTrigger(triggerName, triggerGroupName);<span class="comment">// 停止触发器  </span>
            sched.unscheduleJob(triggerName, triggerGroupName);<span class="comment">// 移除触发器  </span>
            sched.deleteJob(jobName, jobGroupName);<span class="comment">// 删除任务  </span>
        } <span class="keyword">catch</span> (Exception e) {  
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);  
        }  
    }  

    <span class="comment">/** 
     * <span class="doctag">@Description</span>:启动所有定时任务 
     * <span class="doctag">@Title</span>: QuartzManager.java 
     */</span>  
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startJobs</span><span class="params">()</span> </span>{  
        <span class="keyword">try</span> {  
            Scheduler sched = gSchedulerFactory.getScheduler();  
            sched.start();  
        } <span class="keyword">catch</span> (Exception e) {  
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);  
        }  
    }  

    <span class="comment">/** 
     * <span class="doctag">@Description</span>:关闭所有定时任务 
     * <span class="doctag">@Title</span>: QuartzManager.java 
     *  
     * <span class="doctag">@version</span> V2.0 
     */</span>  
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutdownJobs</span><span class="params">()</span> </span>{  
        <span class="keyword">try</span> {  
            Scheduler sched = gSchedulerFactory.getScheduler();  
            <span class="keyword">if</span> (!sched.isShutdown()) {  
                sched.shutdown();  
            }  
        } <span class="keyword">catch</span> (Exception e) {  
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);  
        }  
    }  
}  
</code></pre><p>MemberPrizeJob.java</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberPrizeJob</span> <span class="keyword">implements</span> <span class="title">Job</span></span>{
    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext arg0)</span> <span class="keyword">throws</span> JobExecutionException </span>{
         <span class="comment">//do something for your service</span>
    } 
}
</code></pre><p>QuartzTest.java</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">QuartzTest</span> {  
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>{  
        <span class="keyword">try</span> {  
            String job_name = <span class="string">"动态任务调度"</span>;  
            System.<span class="keyword">out</span>.println(<span class="string">"【系统启动】开始(每1秒输出一次)..."</span>);    
            QuartzManager.addJob(job_name, MemberPrizeJob.class, <span class="string">"0/1 * * * * ?"</span>);    

            Thread.sleep(<span class="number">5000</span>);    
            System.<span class="keyword">out</span>.println(<span class="string">"【修改时间】开始(每2秒输出一次)..."</span>);    
            QuartzManager.modifyJobTime(job_name, <span class="string">"10/2 * * * * ?"</span>);    
            Thread.sleep(<span class="number">6000</span>);    
            System.<span class="keyword">out</span>.println(<span class="string">"【移除定时】开始..."</span>);    
            QuartzManager.removeJob(job_name);    
            System.<span class="keyword">out</span>.println(<span class="string">"【移除定时】成功"</span>);    

            System.<span class="keyword">out</span>.println(<span class="string">"【再次添加定时任务】开始(每10秒输出一次)..."</span>);    
            QuartzManager.addJob(job_name, MemberPrizeJob.class, <span class="string">"*/10 * * * * ?"</span>);    
            Thread.sleep(<span class="number">60000</span>);    
            System.<span class="keyword">out</span>.println(<span class="string">"【移除定时】开始..."</span>);    
            QuartzManager.removeJob(job_name);    
            System.<span class="keyword">out</span>.println(<span class="string">"【移除定时】成功"</span>);  
        } <span class="keyword">catch</span> (Exception e) {  
            e.printStackTrace();  
        }  
    }  
} 
</code></pre><p>调用  <strong>QuartzManager.addJob(job_name, MemberPrizeJob.class, “0/1 <em> </em> <em> </em> ?”);    </strong>，先往数据库插入记录然后定时调度扫描表发现有status为0的然后添加JOB。</p>
<p>以上纯属虚构,如有雷同全属巧合。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前面一节讲了用spring+quartz 定时调度，这个能满足大多数需求，但是有一些动态的JOB，该如何处理。我大概讲一下我的思路：</p>
<p>首先创建JOB表，启动一个定时调度(上节写了)扫描这个表有没有新增的记录(status=0的记录),如果有就往quartz里面]]>
    </summary>
    
      <category term="任务调度" scheme="http://blog.chen777.com/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring-quartz]]></title>
    <link href="http://blog.chen777.com/2016/03/28/spring-quartz/"/>
    <id>http://blog.chen777.com/2016/03/28/spring-quartz/</id>
    <published>2016-03-28T02:40:09.000Z</published>
    <updated>2016-03-29T08:20:39.545Z</updated>
    <content type="html"><![CDATA[<p>CronTrigger</p>
<p>CronTriggers往往比SimpleTrigger更有用，如果您需要基于日历的概念，而非SimpleTrigger完全指定的时间间隔，复发的发射工作的时间表。<br>CronTrigger，你可以指定触发的时间表如“每星期五中午”，或“每个工作日9:30时”，甚至“每5分钟一班9:00和10:00逢星期一上午，星期三星期五“。<br>即便如此，SimpleTrigger一样，CronTrigger拥有的startTime指定的时间表时生效，指定的时间表时，应停止（可选）结束时间。</p>
<p>Cron Expressions</p>
<p>cron的表达式被用来配置CronTrigger实例。 cron的表达式是字符串，实际上是由七子表达式，描述个别细节的时间表。这些子表达式是分开的空白，代表：</p>
<ol>
<li>Seconds</li>
<li>Minutes</li>
<li>Hours</li>
<li>Day-of-Month</li>
<li>Month</li>
<li>Day-of-Week</li>
<li>Year (可选字段)<br>例  “0 0 12 ? * WED” 在每星期三下午12:00 执行,</li>
</ol>
<p>个别子表达式可以包含范围, 例如，在前面的例子里(“WED”)可以替换成 “MON-FRI”, “MON, WED, FRI”甚至”MON-WED,SAT”.</p>
<p>“*” 代表整个时间段.</p>
<p>每一个字段都有一套可以指定有效值，如</p>
<p>Seconds (秒)         ：可以用数字0－59 表示，</p>
<p>Minutes(分)          ：可以用数字0－59 表示，</p>
<p>Hours(时)             ：可以用数字0-23表示,</p>
<p>Day-of-Month(天) ：可以用数字1-31 中的任一一个值，但要注意一些特别的月份</p>
<p>Month(月)            ：可以用0-11 或用字符串  “JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV and DEC” 表示</p>
<p>Day-of-Week(每周)：可以用数字1-7表示（1 ＝ 星期日）或用字符口串“SUN, MON, TUE, WED, THU, FRI and SAT”表示</p>
<p>“/”：为特别单位，表示为“每”如“0/15”表示每隔15分钟执行一次,“0”表示为从“0”分开始, “3/20”表示表示每隔20分钟执行一次，“3”表示从第3分钟开始执行</p>
<p>“?”：表示每月的某一天，或第周的某一天</p>
<p>“L”：用于每月，或每周，表示为每月的最后一天，或每个月的最后星期几如“6L”表示“每月的最后一个星期五”</p>
<p>“W”：表示为最近工作日，如“15W”放在每月（day-of-month）字段上表示为“到本月15日最近的工作日”</p>
<p>““#”：是用来指定“的”每月第n个工作日,例 在每周（day-of-week）这个字段中内容为”6#3” or “FRI#3” 则表示“每月第三个星期五”</p>
<p>1）Cron表达式的格式：秒 分 时 日 月 周 年(可选)。</p>
<pre><code>字段名                 允许的值                        允许的特殊字符  
秒                         <span class="number">0</span>-<span class="number">59</span>                               , - * /  
分                         <span class="number">0</span>-<span class="number">59</span>                               , - * /  
小时                     <span class="number">0</span>-<span class="number">23</span>                               , - * /  
日                         <span class="number">1</span>-<span class="number">31</span>                               , - * ? / L W C  
月                         <span class="number">1</span>-<span class="number">12</span> or JAN-DEC         , - * /  
周几                     <span class="number">1</span>-<span class="number">7</span> or SUN-SAT           , - * ? / L C <span class="preprocessor">#  </span>
年 (可选字段)     empty, <span class="number">1970</span>-<span class="number">2099</span>      , - * /



“?”字符：表示不确定的值

“,”字符：指定数个值

“-”字符：指定一个值的范围

“/”字符：指定一个值的增加幅度。n/m表示从n开始，每次增加m

“L”字符：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X

“W”字符：指定离给定日期最近的工作日(周一到周五)

“<span class="preprocessor">#”字符：表示该月第几个周X。<span class="number">6</span>#<span class="number">3</span>表示该月第<span class="number">3</span>个周五</span>
</code></pre><p>  2）Cron表达式范例：</p>
<pre><code>每隔<span class="number">5</span>秒执行一次：*/<span class="number">5</span> * * * * ?

每隔<span class="number">1</span>分钟执行一次：<span class="number">0</span> */<span class="number">1</span> * * * ?

每天<span class="number">23</span>点执行一次：<span class="number">0</span> <span class="number">0</span> <span class="number">23</span> * * ?

每天凌晨<span class="number">1</span>点执行一次：<span class="number">0</span> <span class="number">0</span> <span class="number">1</span> * * ?

每月<span class="number">1</span>号凌晨<span class="number">1</span>点执行一次：<span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> * ?

每月最后一天<span class="number">23</span>点执行一次：<span class="number">0</span> <span class="number">0</span> <span class="number">23</span> L * ?

每周星期天凌晨<span class="number">1</span>点实行一次：<span class="number">0</span> <span class="number">0</span> <span class="number">1</span> ? * L

在<span class="number">26</span>分、<span class="number">29</span>分、<span class="number">33</span>分执行一次：<span class="number">0</span> <span class="number">26</span>,<span class="number">29</span>,<span class="number">33</span> * * * ?

每天的<span class="number">0</span>点、<span class="number">13</span>点、<span class="number">18</span>点、<span class="number">21</span>点都执行一次：<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>,<span class="number">13</span>,<span class="number">18</span>,<span class="number">21</span> * * ?
</code></pre><p><a href="http://www.jeasyuicn.com/cron/" target="_blank" rel="external">quartz 表达式生成器</a></p>
<p>添加相关jar包：quartz-1.8.3.jar，spring 相关jar包</p>
<ol>
<li><p>web.xml中加载 applicationContext-quartz.xml</p>
<pre><code>&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;<span class="regexp">/param-name&gt;
    &lt;param-value&gt;
        classpath*:/application</span>Context.xml,
        classpath*<span class="symbol">:/applicationContext-shiro</span>.xml
        classpath*<span class="symbol">:/applicationContext-quartz</span>.xml
    &lt;<span class="regexp">/param-value&gt;
&lt;/context</span>-param&gt;
</code></pre></li>
<li><p>applicationContext-quartz.xml</p>
<pre><code><span class="xml"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span>
    <span class="attribute">xmlns:tx</span>=<span class="value">"http://www.springframework.org/schema/tx"</span> <span class="attribute">xmlns:cache</span>=<span class="value">"http://www.springframework.org/schema/cache"</span> <span class="attribute">xmlns:task</span>=<span class="value">"http://www.springframework.org/schema/task"</span>
    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd"</span>
    &gt;</span>

     <span class="comment">&lt;!-- 要调用的工作类 --&gt;</span>
        <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"quartzJob"</span> <span class="attribute">class</span>=<span class="value">"net.wit.test.QuartzJob"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span> 
         <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"quartzJobTwo"</span> <span class="attribute">class</span>=<span class="value">"net.wit.test.QuartzJob2"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
      <span class="comment">&lt;!-- 可继续加新的任务   --&gt;</span> 
         <span class="comment">&lt;!-- 要调用的工作类结束 --&gt;</span> 

         <span class="comment">&lt;!-- 定义调用对象和调用对象的方法 --&gt;</span> 
         <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"jobtask"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span> 
             <span class="comment">&lt;!-- 调用的类 --&gt;</span> 
             <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetObject"</span>&gt;</span> 
                 <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"quartzJob"</span>/&gt;</span> 
             <span class="tag">&lt;/<span class="title">property</span>&gt;</span> 
             <span class="comment">&lt;!-- 调用类中的方法 --&gt;</span> 
             <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetMethod"</span>&gt;</span> 
                 <span class="tag">&lt;<span class="title">value</span>&gt;</span>work<span class="tag">&lt;/<span class="title">value</span>&gt;</span> 
             <span class="tag">&lt;/<span class="title">property</span>&gt;</span> 
         <span class="tag">&lt;/<span class="title">bean</span>&gt;</span> 

         <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"jobtask2"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span> 
             <span class="comment">&lt;!-- 调用的类 --&gt;</span> 
             <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetObject"</span>&gt;</span> 
                 <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"quartzJobTwo"</span>/&gt;</span> 
             <span class="tag">&lt;/<span class="title">property</span>&gt;</span> 
             <span class="comment">&lt;!-- 调用类中的方法 --&gt;</span> 
             <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetMethod"</span>&gt;</span> 
                 <span class="tag">&lt;<span class="title">value</span>&gt;</span>work<span class="tag">&lt;/<span class="title">value</span>&gt;</span> 
             <span class="tag">&lt;/<span class="title">property</span>&gt;</span> 
         <span class="tag">&lt;/<span class="title">bean</span>&gt;</span> 
         <span class="comment">&lt;!-- 可继续加新的   --&gt;</span> 
       <span class="comment">&lt;!-- 定义调用对象和调用对象的方法结束 --&gt;</span> 

         <span class="comment">&lt;!-- 定义触发时间 --&gt;</span> 
         <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"doTime"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.scheduling.quartz.CronTriggerBean"</span>&gt;</span> 
             <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jobDetail"</span>&gt;</span> 
                 <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"jobtask"</span>/&gt;</span> 
             <span class="tag">&lt;/<span class="title">property</span>&gt;</span> 
             <span class="comment">&lt;!-- cron表达式 此处定义为一直触发执行任务 --&gt;</span> 
             <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"cronExpression"</span>&gt;</span> 
                 <span class="tag">&lt;<span class="title">value</span>&gt;</span>10,15,20,25,30,35,40,45,50,55 * * * * ?<span class="tag">&lt;/<span class="title">value</span>&gt;</span> 
             <span class="tag">&lt;/<span class="title">property</span>&gt;</span> 
         <span class="tag">&lt;/<span class="title">bean</span>&gt;</span> 

         <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"doTime2"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.scheduling.quartz.CronTriggerBean"</span>&gt;</span> 
             <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jobDetail"</span>&gt;</span> 
                 <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"jobtask2"</span>/&gt;</span> 
             <span class="tag">&lt;/<span class="title">property</span>&gt;</span> 
             <span class="comment">&lt;!-- cron表达式   此处定义周一至周日的下午13:15触发--&gt;</span> 
             <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"cronExpression"</span>&gt;</span> 
                 <span class="tag">&lt;<span class="title">value</span>&gt;</span>0 15 13 ? * SUN-SAT<span class="tag">&lt;/<span class="title">value</span>&gt;</span> 
             <span class="tag">&lt;/<span class="title">property</span>&gt;</span> 
         <span class="tag">&lt;/<span class="title">bean</span>&gt;</span> 
         <span class="comment">&lt;!-- 可继续加新的   --&gt;</span> 
         <span class="comment">&lt;!-- 定义触发时间结束 --&gt;</span> 

  <span class="comment">&lt;!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序   --&gt;</span> 
         <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"startQuertz"</span> <span class="attribute">lazy-init</span>=<span class="value">"false"</span> <span class="attribute">autowire</span>=<span class="value">"no"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span> 
             <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"triggers"</span>&gt;</span> 
                 <span class="tag">&lt;<span class="title">list</span>&gt;</span> 
                     <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"doTime"</span>/&gt;</span> 
                     <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"doTime2"</span>/&gt;</span> 
                   <span class="comment">&lt;!-- 可继续加新的   --&gt;</span> 

                 <span class="tag">&lt;/<span class="title">list</span>&gt;</span> 
             <span class="tag">&lt;/<span class="title">property</span>&gt;</span> 
         <span class="tag">&lt;/<span class="title">bean</span>&gt;</span> 
       <span class="comment">&lt;!-- 总管理类结束   --&gt;</span>     
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>

public class QuartzJob 
</span><span class="expression">{ 
     <span class="variable">public</span> <span class="variable">void</span> <span class="variable">work</span>() 
     { 
             <span class="variable">System.out.println</span>(<span class="string">"Spring Quartz的任务调度1被调用！"</span>); 
             //定时调用的业务逻辑 
     }</span><span class="xml"> 
} 

public class QuartzJob2
</span><span class="expression">{ 
     <span class="variable">public</span> <span class="variable">void</span> <span class="variable">work</span>() 
     { 
             <span class="variable">System.out.println</span>(<span class="string">"Spring Quartz的任务调度2被调用！"</span>); 
             //定时调用的业务逻辑 
     }</span><span class="xml"> 
}</span>
</code></pre></li>
</ol>
<p>console:<br><img src="http://ww4.sinaimg.cn/large/0063lLoQgw1f2dt1qlbsmj309e02a0t2.jpg" alt="http://ww4.sinaimg.cn/large/0063lLoQgw1f2dt1qlbsmj309e02a0t2.jpg"></p>
<p><strong><p style="color:red;">如果报错可能是jar版本问题</p><p></p></strong><br> <img src="http://ww4.sinaimg.cn/large/0063lLoQgw1f2dsxasihnj30jz09dwjo.jpg" alt="http://ww4.sinaimg.cn/large/0063lLoQgw1f2dsxasihnj30jz09dwjo.jpg"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>CronTrigger</p>
<p>CronTriggers往往比SimpleTrigger更有用，如果您需要基于日历的概念，而非SimpleTrigger完全指定的时间间隔，复发的发射工作的时间表。<br>CronTrigger，你可以指定触发的时间表如“每星期五中午”]]>
    </summary>
    
      <category term="任务调度" scheme="http://blog.chen777.com/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java堆栈了解]]></title>
    <link href="http://blog.chen777.com/2016/03/16/java%E5%A0%86%E6%A0%88%E4%BA%86%E8%A7%A3/"/>
    <id>http://blog.chen777.com/2016/03/16/java堆栈了解/</id>
    <published>2016-03-16T08:52:53.000Z</published>
    <updated>2016-03-16T09:54:53.318Z</updated>
    <content type="html"><![CDATA[<p>　　JAVA的JVM的内存可分为3个区：堆(heap)、栈(stack)和方法区(method)</p>
<pre><code>堆区:
<span class="number">1.</span>存储的全部是对象，每个对象都包含一个与之对应的<span class="keyword">class</span>的信息。(<span class="keyword">class</span>的目的是得到操作指令)
<span class="number">2.</span>jvm只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身

栈区:
<span class="number">1.</span>每个线程包含一个栈区，栈中只保存基础数据类型的对象和自定义对象的引用(不是对象)，对象都存放在堆区中
<span class="number">2.</span>每个栈中的数据(原始类型和对象引用)都是私有的，其他栈不能访问。
<span class="number">3.</span>栈分为<span class="number">3</span>个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。

方法区:
<span class="number">1.</span>又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的<span class="keyword">class</span>和<span class="keyword">static</span>变量。
<span class="number">2.</span>方法区中包含的都是在整个程序中永远唯一的元素，如<span class="keyword">class</span>，<span class="keyword">static</span>变量。
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>　　JAVA的JVM的内存可分为3个区：堆(heap)、栈(stack)和方法区(method)</p>
<pre><code>堆区:
<span class="number">1.</span>存储的全部是对象，每个对象都包含一个与之对应的<span class="key]]>
    </summary>
    
      <category term="java" scheme="http://blog.chen777.com/tags/java/"/>
    
      <category term="堆栈" scheme="http://blog.chen777.com/tags/%E5%A0%86%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015年终总结]]></title>
    <link href="http://blog.chen777.com/2016/03/02/2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.chen777.com/2016/03/02/2015年终总结/</id>
    <published>2016-03-02T00:55:45.000Z</published>
    <updated>2016-03-05T02:58:16.883Z</updated>
    <content type="html"><![CDATA[<h1 id="2015·悲伤">2015·悲伤</h1><p>上海外滩跨年夜发生踩踏事故</p>
<h1 id="2015·大起大落">2015·大起大落</h1><p>6月，在经历上半年的牛市之后，A股进入暴跌模式。6月19日，股市大跌，生产速效救心丸的中新药业却大涨近5%，让人哭笑不得。<br><a id="more"></a></p>
<h1 id="2015·离开">2015·离开</h1><p>科比，这个在一代人眼中最接近神的男人，带着我们的青春退役了。</p>
<h1 id="2015·铭记">2015·铭记</h1><p>北京获2022冬奥会主办权，成为第一个既举办过夏奥会又举办冬奥会的城市。<br>纪念抗战胜利70周年阅兵仪式在北京天安门广场举行。</p>
<h1 id="2015·爱情">2015·爱情</h1><p>周杰伦与昆凌在英国约克郡塞尔比镇的同名教堂举办婚礼。<br>黄晓明和Angelababy在上海举办婚礼。</p>
<p>就这样在喜忧参半中，2015年走近了尾声！</p>
<p>2015年发生了太多事情还没来得及理清楚就已经悄然而过,从外包到产品公司，从产品公司到空壳P2P公司。<br><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1f1i9sf2ggsj306y064jrc.jpg" alt="不开心"></p>
<p>2016已经到了,给自己一个规划吧；</p>
<ol>
<li>搭建dobbo框架,完成PC+APP+WAP线上线下相通</li>
<li>写一次底层ArrayList、LinkList、队列、栈的实现</li>
<li>看完一本jvm的书</li>
<li>gogoing</li>
</ol>
<p>把所有的希望给明天，把所有的努力给今天</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="2015·悲伤">2015·悲伤</h1><p>上海外滩跨年夜发生踩踏事故</p>
<h1 id="2015·大起大落">2015·大起大落</h1><p>6月，在经历上半年的牛市之后，A股进入暴跌模式。6月19日，股市大跌，生产速效救心丸的中新药业却大涨近5%，让人哭笑不得。<br>]]>
    
    </summary>
    
      <category term="日记" scheme="http://blog.chen777.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[追MM与Java的23种设计模式]]></title>
    <link href="http://blog.chen777.com/2015/12/22/%E8%BF%BDMM%E4%B8%8EJava%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.chen777.com/2015/12/22/追MM与Java的23种设计模式/</id>
    <published>2015-12-22T08:18:51.000Z</published>
    <updated>2015-12-22T08:23:10.947Z</updated>
    <content type="html"><![CDATA[<h1 id="创建型模式">创建型模式</h1><h2 id="1、工厂模式">1、工厂模式</h2><p>FACTORY——追MM少不了请吃饭了，麦当劳的鸡翅和肯德基的鸡翅都是MM爱吃的东西，虽然口味有所不同，但不管你带MM去麦当劳或肯德基，只管向服务员说“来四个鸡翅”就行了。麦当劳和肯德基就是生产鸡翅的Factory。</p>
<p>工厂模式：客户类和工厂类分开。消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。缺点是当产品修改时，工厂类也要做相应的修改。如：如何创建及如何向客户端提供。</p>
<h2 id="2、建造模式">2、建造模式</h2><p>BUILDER——MM最爱听的就是“我爱你”这句话了，见到不同地方的MM，要能够用她们的方言跟她们说这句话哦，我有一个多种语言翻译机，上面每种语言都有一个按键，见到MM我只要按对应的键，它就能够用相应的语言说出“我爱你”这句话了，国外的MM也可以轻松搞定，这就是我的“我爱你”builder。（这一定比美军在伊拉克用的翻译机好卖。）</p>
<p>建造模式：将产品的内部表象和产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。建造模式使得产品内部表象可以独立的变化，客户不必知道产品内部组成的细节。建造模式可以强制实行一种分步骤进行的建造过程。</p>
<h2 id="3、工厂方法模式">3、工厂方法模式</h2><p>FACTORY METHOD——请MM去麦当劳吃汉堡，不同的MM有不同的口味，要每个都记住是一件烦人的事情，我一般采用Factory Method模式，带着MM到服务员那儿，说“要一个汉堡”，具体要什么样的汉堡呢，让MM直接跟服务员说就行了。</p>
<p>工厂方法模式：核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类去做，成为一个抽象工厂角色，仅负责给出具体工厂类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。</p>
<h2 id="4、原始模型模式">4、原始模型模式</h2><p>PROTOTYPE——跟MM用QQ聊天，一定要说些深情的话语了，我搜集了好多肉麻的情话，需要时只要copy出来放到QQ里面就行了，这就是我的情话prototype了。（100块钱一份，你要不要。）</p>
<p>原始模型模式：通过给出一个原型对象来指明所要创建的对象的类型，然后用复制这个原型对象的方法创建出更多同类型的对象。原始模型模式允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。</p>
<h2 id="5、单例模式">5、单例模式</h2><p>SINGLETON——俺有6个漂亮的老婆，她们的老公都是我，我就是我们家里的老公Sigleton，她们只要说道“老公”，都是指的同一个人，那就是我。（刚才做了个梦啦，哪有这么好的事。）</p>
<p>单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的“单一实例”的需求时才可使用。</p>
<h1 id="结构型模式">结构型模式</h1><h2 id="6、适配器模式">6、适配器模式</h2><p>ADAPTER——在朋友聚会上碰到了一个美女Sarah，从香港来的，可我不会说粤语，她不会说普通话，只好求助于我的朋友kent了，他作为我和Sarah之间的Adapter，让我和Sarah可以相互交谈了（也不知道他会不会耍我）。</p>
<p>适配器（变压器）模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。适配类可以根据参数返还一个合适的实例给客户端。</p>
<h2 id="7、桥梁模式">7、桥梁模式</h2><p>BRIDGE ——早上碰到MM，要说早上好，晚上碰到MM，要说晚上好；碰到MM穿了件新衣服，要说你的衣服好漂亮哦，碰到MM新做的发型，要说你的头发好漂亮哦。不要问我“早上碰到MM新做了个发型怎么说”这种问题，自己用BRIDGE组合一下不就行了。</p>
<p>桥梁模式：将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联，也就是指在一个软件系统的抽象化和实现化之间使用组合/聚合关系而不是继承关系，从而使两者可以独立的变化。</p>
<h2 id="8、合成模式">8、合成模式</h2><p>COMPOSITE——Mary今天过生日。“我过生日，你要送我一件礼物。”“嗯，好吧，去商店，你自己挑。”“这件T恤挺漂亮，买，这条裙子好看，买，这个包也不错，买。”“喂，买了三件了呀，我只答应送一件礼物的哦。”“什么呀，T恤加裙子加包包，正好配成一套呀，小姐，麻烦你包起来。”“……”，MM都会用Composite模式了，你会了没有？</p>
<p>合成模式：合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。合成模式使得客户端把一个个单独的成分对象和由他们复合而成的合成对象同等看待。</p>
<h2 id="9、装饰模式">9、装饰模式</h2><p>DECORATOR——Mary过完轮到Sarly过生日，还是不要叫她自己挑了，不然这个月伙食费肯定玩完，拿出我去年在华山顶上照的照片，在背面写上“最好的的礼物，就是爱你的Fita”，再到街上礼品店买了个像框（卖礼品的MM也很漂亮哦），再找隔壁搞美术设计的Mike设计了一个漂亮的盒子装起来……，我们都是Decorator，最终都在修饰我这个人呀，怎么样，看懂了吗？</p>
<p>装饰模式：装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。</p>
<h2 id="10、门面模式">10、门面模式</h2><p>FACADE ——我有一个专业的Nikon相机，我就喜欢自己手动调光圈、快门，这样照出来的照片才专业，但MM可不懂这些，教了半天也不会。幸好相机有Facade设计模式，把相机调整到自动档，只要对准目标按快门就行了，一切由相机自动调整，这样MM也可以用这个相机给我拍张照片了。</p>
<p>门面模式：外部与一个子系统的通信必须通过一个统一的门面对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。每一个子系统只有一个门面类，而且此门面类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个门面类。</p>
<h2 id="11、享元模式">11、享元模式</h2><p>FLYWEIGHT ——每天跟MM发短信，手指都累死了，最近买了个新手机，可以把一些常用的句子存在手机里，要用的时候，直接拿出来，在前面加上MM的名字就可以发送了，再不用一个字一个字敲了。共享的句子就是Flyweight，MM的名字就是提取出来的外部特征，根据上下文情况使用。</p>
<p>享元模式：FLYWEIGHT在拳击比赛中指最轻量级。享元模式以共享的方式高效地支持大量的细粒度对象。享元模式能做到共享的关键是区分内蕴状态和外蕴状态。内蕴状态存储在享元内部，不会随环境的改变而有所不同。外蕴状态是随环境的改变而改变的。外蕴状态不能影响内蕴状态，它们是相互独立的。将可以共享的状态和不可以共享的状态从常规类中区分开来，将不可以共享的状态从类里剔除出去。客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。享元模式大幅度地降低内存中对象的数量。</p>
<h2 id="12、代理模式">12、代理模式</h2><p>PROXY——跟MM在网上聊天，一开头总是“hi，你好”、“你从哪儿来呀？”、“你多大了？”、“身高多少呀？”这些话，真烦人，写个程序做为我的Proxy吧，凡是接收到这些话都设置好了自动的回答，接收到其他的话时再通知我回答，怎么样，酷吧。</p>
<p>代理模式：代理模式给某一个对象提供一个代理对象，并由代理对象控制对源对象的引用。代理就是一个人或一个机构代表另一个人或者一个机构采取行动。某些情况下，客户不想或者不能够直接引用一个对象，代理对象可以在客户和目标对象直接起到中介的作用。客户端分辨不出代理主题对象与真实主题对象。代理模式可以并不知道真正的被代理对象，而仅仅持有一个被代理对象的接口，这时候代理对象不能够创建被代理对象，被代理对象必须有系统的其他角色代为创建并传入。</p>
<h1 id="行为模式">行为模式</h1><h2 id="13、责任链模式">13、责任链模式</h2><p>CHAIN OF RESPONSIBLEITY——晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的MM哎，找张纸条，写上“Hi，可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的MM把纸条传给老师了，听说是个老处女呀，快跑！</p>
<p>责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。客户并不知道链上的哪一个对象最终处理这个请求，系统可以在不影响客户端的情况下动态地重新组织链和分配责任。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。</p>
<h2 id="14、命令模式">14、命令模式</h2><p>COMMAND——有一个MM家里管得特别严，没法见面，只好借助于她弟弟在我们俩之间传送信息，她对我有什么指示，就写一张纸条让她弟弟带给我。这不，她弟弟又传送过来一个COMMAND，为了感谢他，我请他吃了碗杂酱面，哪知道他说：“我同时给我姐姐三个男朋友送COMMAND，就数你最小气，才请我吃面。”</p>
<p>命令模式：命令模式把一个请求或者操作封装到一个对象中。命令模式把发出命令的责任和执行命令的责任分割开，委派给不同的对象。命令模式允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。系统支持命令的撤消。</p>
<h2 id="15、解释器模式">15、解释器模式</h2><p>INTERPRETER——俺有一个《泡MM真经》，上面有各种泡MM的攻略，比如说去吃西餐的步骤、去看电影的方法等等，跟MM约会时，只要做一个Interpreter，照着上面的脚本执行就可以了。</p>
<p>解释器模式：给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。解释器模式将描述怎样在有了一个简单的文法后，使用模式设计解释这些语句。在解释器模式里面提到的语言是指任何解释器对象能够解释的任何组合。在解释器模式中需要定义一个代表文法的命令类的等级结构，也就是一系列的组合规则。每一个命令对象都有一个解释方法，代表对命令对象的解释。命令对象的等级结构中的对象的任何排列组合都是一个语言。</p>
<h2 id="16、迭代子模式">16、迭代子模式</h2><p>ITERATOR——我爱上了Mary，不顾一切的向她求婚。<br>Mary：“想要我跟你结婚，得答应我的条件”<br>我：“什么条件我都答应，你说吧”<br>Mary：“我看上了那个一克拉的钻石”<br>我：“我买，我买，还有吗？”<br>Mary：“我看上了湖边的那栋别墅”<br>我：“我买，我买，还有吗？”<br>Mary：“你的小弟弟必须要有50cm长”<br>我脑袋嗡的一声，坐在椅子上，一咬牙：“我剪，我剪，还有吗？”<br>……</p>
<p>迭代子模式：迭代子模式可以顺序访问一个聚集中的元素而不必暴露聚集的内部表象。多个对象聚在一起形成的总体称之为聚集，聚集对象是能够包容一组对象的容器对象。迭代子模式将迭代逻辑封装到一个独立的子对象中，从而与聚集本身隔开。迭代子模式简化了聚集的界面。每一个聚集对象都可以有一个或一个以上的迭代子对象，每一个迭代子的迭代状态可以是彼此独立的。迭代算法可以独立于聚集角色变化。</p>
<h2 id="17、调停者模式">17、调停者模式</h2><p>MEDIATOR——四个MM打麻将，相互之间谁应该给谁多少钱算不清楚了，幸亏当时我在旁边，按照各自的筹码数算钱，赚了钱的从我这里拿，赔了钱的也付给我，一切就OK啦，俺得到了四个MM的电话。</p>
<p>调停者模式：调停者模式包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使他们可以松散耦合。当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。保证这些作用可以彼此独立的变化。调停者模式将多对多的相互作用转化为一对多的相互作用。调停者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。</p>
<h2 id="18、备忘录模式">18、备忘录模式</h2><p>MEMENTO——同时跟几个MM聊天时，一定要记清楚刚才跟MM说了些什么话，不然MM发现了会不高兴的哦，幸亏我有个备忘录，刚才与哪个MM说了什么话我都拷贝一份放到备忘录里面保存，这样可以随时查看以前的记录啦。</p>
<p>备忘录模式：备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。</p>
<h2 id="19、观察者模式">19、观察者模式</h2><p>OBSERVER——想知道咱们公司最新MM情报吗？加入公司的MM情报邮件组就行了，tom负责搜集情报，他发现的新情报不用一个一个通知我们，直接发布给邮件组，我们作为订阅者（观察者）就可以及时收到情报啦。</p>
<p>观察者模式：观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。</p>
<h2 id="20、状态模式">20、状态模式</h2><p>STATE——跟MM交往时，一定要注意她的状态哦，在不同的状态时她的行为会有不同，比如你约她今天晚上去看电影，对你没兴趣的MM就会说“有事情啦”，对你不讨厌但还没喜欢上的MM就会说“好啊，不过可以带上我同事么？”，已经喜欢上你的MM就会说“几点钟？看完电影再去泡吧怎么样？”，当然你看电影过程中表现良好的话，也可以把MM的状态从不讨厌不喜欢变成喜欢哦。</p>
<p>状态模式：状态模式允许一个对象在其内部状态改变的时候改变行为。这个对象看上去象是改变了它的类一样。状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。</p>
<h2 id="21、策略模式">21、策略模式</h2><p>STRATEGY——跟不同类型的MM约会，要用不同的策略，有的请电影比较好，有的则去吃小吃效果不错，有的去海边浪漫最合适，但目的都是为了得到MM的芳心，我的追MM锦囊中有好多Strategy哦。</p>
<p>策略模式：策略模式针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。策略模式把行为和环境分开。环境类负责维持和查询行为类，各种算法在具体的策略类中提供。由于算法和环境独立开来，算法的增减、修改都不会影响到环境和客户端。<br>22、模板方法模式<br>TEMPLATE METHOD——看过《如何说服女生上床》这部经典文章吗？女生从认识到上床的不变的步骤分为巧遇、打破僵局、展开追求、接吻、前戏、动手、爱抚、进去八大步骤（Template method），但每个步骤针对不同的情况，都有不一样的做法，这就要看你随机应变啦（具体实现）。</p>
<p>模板方法模式：模板方法模式准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。</p>
<h2 id="23、访问者模式">23、访问者模式</h2><p>VISITOR——情人节到了，要给每个MM送一束鲜花和一张卡片，可是每个MM送的花都要针对她个人的特点，每张卡片也要根据个人的特点来挑，我一个人哪搞得清楚，还是找花店老板和礼品店老板做一下Visitor，让花店老板根据MM的特点选一束花，让礼品店老板也根据每个人特点选一张卡，这样就轻松多了。</p>
<p>访问者模式：访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构可以保持不变。访问者模式适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。访问者模式使得增加新的操作变得很容易，就是增加一个新的访问者类。访问者模式将有关的行为集中到一个访问者对象中，而不是分散到一个个的节点类中。当使用访问者模式时，要将尽可能多的对象浏览逻辑放在访问者类中，而不是放到它的子类中。访问者模式可以跨过几个类的等级结构访问属于不同的等级结构的成员类。</p>
]]></content>
    <summary type="html">
    <![CDATA[这是一篇在网络上流传很广的经典旧文，暂时没找到原作者，目前所看到的最早转载时间是 2003 年 11 月 20 日。设计模式做为程序员的“内功心法”，越来越受到重视。作者用轻松的语言，形象解释了 23 种模式，有很好的启发作用。]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.chen777.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈大型web系统架构]]></title>
    <link href="http://blog.chen777.com/2015/12/21/%E6%B5%85%E8%B0%88%E5%A4%A7%E5%9E%8Bweb%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <id>http://blog.chen777.com/2015/12/21/浅谈大型web系统架构/</id>
    <published>2015-12-21T01:18:56.000Z</published>
    <updated>2016-03-29T09:11:56.466Z</updated>
    <content type="html"><![CDATA[<p>动态应用，是相对于网站静态内容而言，是指以c/c++、php、Java、perl、.net等服务器端语言开发的网络应用软件，比如论坛、网络相册、交友、BLOG等常见应用。动态应用系统通常与数据库系统、缓存系统、分布式存储系统等密不可分。<br>大型动态应用系统平台主要是针对于大流量、高并发网站建立的底层系统架构。大型网站的运行需要一个可靠、安全、可扩展、易维护的应用系统平台做为支撑，以保证网站应用的平稳运行。<br>大型动态应用系统又可分为几个子系统：</p>
<ol>
<li>Web前端系统</li>
<li>负载均衡系统</li>
<li>数据库集群系统</li>
<li>缓存系统</li>
<li>分布式存储系统</li>
<li>分布式服务器管理系统</li>
<li>代码分发系统　</li>
</ol>
<h1 id="Web前端系统">Web前端系统</h1><p><img src="http://ww1.sinaimg.cn/large/0063lLoQgw1ez70qycf0jj30io0b9t9w.jpg" alt="web前端系统"><br>为了达到不同应用的服务器共享、避免单点故障、集中管理、统一配置等目的，不以应用划分服务器，而是将所有服务器做统一使用，每台服务器都可以对多个应用提供服务，当某些应用访问量升高时，通过增加服务器节点达到整个服务器集群的性能提高，同时使他应用也会受益。该Web前端系统基于Apache/Lighttpd/Eginx等的虚拟主机平台，提供PHP程序运行环境。服务器对开发人员是透明的，不需要开发人员介入服务器管理</p>
<h1 id="负载均衡系统">负载均衡系统</h1><p>　　<br><img src="http://ww4.sinaimg.cn/large/0063lLoQgw1ez7157b575j30io0avjsi.jpg" alt="负载均衡系统"></p>
<p>负载均衡系统分为硬件和软件两种。硬件负载均衡效率高，但是价格贵，比如F5等。软件负载均衡系统价格较低或者免费，效率较硬件负载均衡系统低，不过对于流量一般或稍大些网站来讲也足够使用，比如lvs, nginx。大多数网站都是硬件、软件负载均衡系统并用。　　</p>
<h1 id="数据库集群系统">数据库集群系统</h1><p><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1ez7170dwg4j30io0ax0u0.jpg" alt="数据库集群系统"></p>
<p>由于Web前端采用了负载均衡集群结构提高了服务的有效性和扩展性，因此数据库必须也是高可靠的，才能保证整个服务体系的高可靠性，如何构建一个高可靠的、可以提供大规模并发处理的数据库体系？<br>我们可以采用如上图所示的方案：<br>1) 使用 MySQL 数据库，考虑到Web应用的数据库读多写少的特点，我们主要对读数据库做了优化，提供专用的读数据库和写数据库，在应用程序中实现读操作和写操作分别访问不同的数据库。<br>2) 使用 MySQL Replication 机制实现快速将主库（写库）的数据库复制到从库（读库）。一个主库对应多个从库，主库数据实时同步到从库。<br>3) 写数据库有多台，每台都可以提供多个应用共同使用，这样可以解决写库的性能瓶颈问题和单点故障问题。<br>4) 读数据库有多台，通过负载均衡设备实现负载均衡，从而达到读数据库的高性能、高可靠和高可扩展性。<br>5) 数据库服务器和应用服务器分离。<br>6) 从数据库使用BigIP做负载均衡。</p>
<h1 id="缓存系统">缓存系统</h1><p><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1ez71enhk3nj30io0cggn2.jpg" alt="缓存系统"></p>
<p>缓存分为文件缓存、内存缓存、数据库缓存。在大型Web应用中使用最多且效率最高的是内存缓存。最常用的内存缓存工具是Memcached。使用正确的缓存系统可以达到实现以下目标：<br>1、使用缓存系统可以提高访问效率，提高服务器吞吐能力，改善用户体验。<br>2、减轻对数据库及存储集服务器的访问压力。<br>3、Memcached服务器有多台，避免单点故障，提供高可靠性和可扩展性，提高性能。</p>
<h1 id="分布式存储系统">分布式存储系统</h1><p><img src="http://ww2.sinaimg.cn/large/0063lLoQgw1ez718rcz72j30io0cvgn7.jpg" alt="分布式存储系统"></p>
<p>Web系统平台中的存储需求有下面两个特点：<br>1) 存储量很大，经常会达到单台服务器无法提供的规模，比如相册、视频等应用。因此需要专业的大规模存储系统。<br>2) 负载均衡cluster中的每个节点都有可能访问任何一个数据对象，每个节点对数据的处理也能被其他节点共享，因此这些节点要操作的数据从逻辑上看只能是一个整体，不是各自独立的数据资源。<br>因此高性能的分布式存储系统对于大型网站应用来说是非常重要的一环。（这个地方需要加入对某个分布式存储系统的简单介绍。）</p>
<h1 id="分布式存储系统-1">分布式存储系统</h1><p><img src="http://ww2.sinaimg.cn/large/0063lLoQgw1ez719993p3j30io0dfjt1.jpg" alt="分布式存储系统"></p>
<p>随着网站访问流量的不断增加，大多的网络服务都是以负载均衡集群的方式对外提供服务，随之集群规模的扩大，原来基于单机的服务器管理模式已经不能够满足我们的需求，新的需求必须能够集中式的、分组的、批量的、自动化的对服务器进行管理，能够批量化的执行计划任务。<br>在分布式服务器管理系统软件中有一些比较优秀的软件，其中比较理想的一个是Cfengine。它可以对服务器进行分组，不同的分组可以分别定制系统配置文件、计划任务等配置。它是基于C/S 结构的，所有的服务器配置和管理脚本程序都保存在Cfengine Server上，而被管理的服务器运行着 Cfengine Client 程序，Cfengine Client通过SSL加密的连接定期的向服务器端发送请求以获取最新的配置文件和管理命令、脚本程序、补丁安装等任务。<br>有了Cfengine这种集中式的服务器管理工具，我们就可以高效的实现大规模的服务器集群管理，被管理服务器和 Cfengine Server 可以分布在任何位置，只要网络可以连通就能实现快速自动化的管理。</p>
<h1 id="代码发布系统">代码发布系统</h1><p><img src="http://ww1.sinaimg.cn/large/0063lLoQgw1ez719vmzp1j30io0ceq4d.jpg" alt="代码发布系统"></p>
<p>随着网站访问流量的不断增加，大多的网络服务都是以负载均衡集群的方式对外提供服务，随之集群规模的扩大，为了满足集群环境下程序代码的批量分发和更新，我们还需要一个程序代码发布系统。<br>这个发布系统可以帮我们实现下面的目标：<br>1) 生产环境的服务器以虚拟主机方式提供服务，不需要开发人员介入维护和直接操作，提供发布系统可以实现不需要登陆服务器就能把程序分发到目标服务器。<br>2) 我们要实现内部开发、内部测试、生产环境测试、生产环境发布的4个开发阶段的管理，发布系统可以介入各个阶段的代码发布。<br>3) 我们需要实现源代码管理和版本控制，SVN可以实现该需求。<br>这里面可以使用常用的工具Rsync，通过开发相应的脚本工具实现服务器集群间代码同步分发。<br>来源：<a href="http://blog.csdn.net/dinglang_2009/article/details/6863697" target="_blank" rel="external">http://blog.csdn.net/dinglang_2009/article/details/6863697</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>动态应用，是相对于网站静态内容而言，是指以c/c++、php、Java、perl、.net等服务器端语言开发的网络应用软件，比如论坛、网络相册、交友、BLOG等常见应用。动态应用系统通常与数据库系统、缓存系统、分布式存储系统等密不可分。<br>大型动态应用系统平台主要是针对]]>
    </summary>
    
      <category term="编程技术" scheme="http://blog.chen777.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java工程师成神之路]]></title>
    <link href="http://blog.chen777.com/2015/12/21/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%88%90%E7%A5%9E%E4%B9%8B%E8%B7%AF/"/>
    <id>http://blog.chen777.com/2015/12/21/Java工程师成神之路/</id>
    <published>2015-12-21T01:08:46.000Z</published>
    <updated>2015-12-21T01:15:44.759Z</updated>
    <content type="html"><![CDATA[<h1 id="Java工程师成神之路">Java工程师成神之路</h1><h2 id="一、基础篇">一、基础篇</h2><h3 id="1-1_JVM">1.1 JVM</h3><h4 id="1-1-1-_Java内存模型，Java内存管理，Java堆和栈，垃圾回收">1.1.1. Java内存模型，Java内存管理，Java堆和栈，垃圾回收</h4><p><a href="http://www.jcp.org/en/jsr/detail?id=133" target="_blank" rel="external">http://www.jcp.org/en/jsr/detail?id=133</a><br><a href="http://ifeve.com/jmm-faq/" target="_blank" rel="external">http://ifeve.com/jmm-faq/</a></p>
<h4 id="1-1-2-_了解JVM各种参数及调优">1.1.2. 了解JVM各种参数及调优</h4><h4 id="1-1-3-_学习使用Java工具">1.1.3. 学习使用Java工具</h4><p>jps, jstack, jmap, jconsole, jinfo, jhat, javap, …<br><a href="http://kenai.com/projects/btrace" target="_blank" rel="external">http://kenai.com/projects/btrace</a><br><a href="http://www.crashub.org/" target="_blank" rel="external">http://www.crashub.org/</a><br><a href="https://github.com/taobao/TProfiler" target="_blank" rel="external">https://github.com/taobao/TProfiler</a><br><a href="https://github.com/CSUG/HouseMD" target="_blank" rel="external">https://github.com/CSUG/HouseMD</a><br><a href="http://wiki.cyclopsgroup.org/jmxterm" target="_blank" rel="external">http://wiki.cyclopsgroup.org/jmxterm</a><br><a href="https://github.com/jlusdy/TBJMap" target="_blank" rel="external">https://github.com/jlusdy/TBJMap</a></p>
<h4 id="1-1-4-_学习Java诊断工具">1.1.4. 学习Java诊断工具</h4><p><a href="http://www.eclipse.org/mat/" target="_blank" rel="external">http://www.eclipse.org/mat/</a><br><a href="http://visualvm.java.net/oqlhelp.html" target="_blank" rel="external">http://visualvm.java.net/oqlhelp.html</a></p>
<h4 id="1-1-5-_自己编写各种outofmemory，stackoverflow程序">1.1.5. 自己编写各种outofmemory，stackoverflow程序</h4><p>HeapOutOfMemory<br>Young OutOfMemory<br>MethodArea OutOfMemory<br>ConstantPool OutOfMemory<br>DirectMemory OutOfMemory<br>Stack OutOfMemory<br>Stack OverFlow</p>
<h4 id="1-1-6-_使用工具尝试解决以下问题，并写下总结">1.1.6. 使用工具尝试解决以下问题，并写下总结</h4><p>当一个Java程序响应很慢时如何查找问题<br>当一个Java程序频繁FullGC时如何解决问题，如何查看垃圾回收日志<br>当一个Java应用发生OutOfMemory时该如何解决，年轻代、年老代、永久代解决办法不同，导致原因也不同</p>
<h4 id="1-1-7-_参考资料">1.1.7. 参考资料</h4><p><a href="http://docs.oracle.com/javase/specs/jvms/se7/html/" target="_blank" rel="external">http://docs.oracle.com/javase/specs/jvms/se7/html/</a><br><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/" target="_blank" rel="external">http://www.cs.umd.edu/~pugh/java/memoryModel/</a><br><a href="http://gee.cs.oswego.edu/dl/jmm/cookbook.html" target="_blank" rel="external">http://gee.cs.oswego.edu/dl/jmm/cookbook.html</a></p>
<h3 id="1-2-_Java基础知识">1.2. Java基础知识</h3><h4 id="1-2-1-_阅读源代码">1.2.1. 阅读源代码</h4><p>java.lang.String<br>java.lang.Integer<br>java.lang.Long<br>java.lang.Enum<br>java.math.BigDecimal<br>java.lang.ThreadLocal<br>java.lang.ClassLoader &amp; java.net.URLClassLoader<br>java.util.ArrayList &amp; java.util.LinkedList<br>java.util.HashMap &amp; java.util.LinkedHashMap &amp; java.util.TreeMap<br>java.util.HashSet &amp; java.util.LinkedHashSet &amp; java.util.TreeSet</p>
<h4 id="1-2-2-_熟悉Java中各种变量类型">1.2.2. 熟悉Java中各种变量类型</h4><p>1.2.3. 熟悉Java String的使用，熟悉String的各种函数<br>1.2.4. 熟悉Java中各种关键字<br>1.2.5. 学会使用List，Map，Stack，Queue，Set ####<br>上述数据结构的遍历<br>上述数据结构的使用场景<br>Java实现对Array/List排序<br>java.uti.Arrays.sort()<br>java.util.Collections.sort()<br>Java实现对List去重<br>Java实现对List去重，并且需要保留数据原始的出现顺序<br>Java实现最近最少使用cache，用LinkedHashMap</p>
<h4 id="1-2-6-_Java_IO&amp;Java_NIO，并学会使用">1.2.6. Java IO&amp;Java NIO，并学会使用</h4><p>java.io.<em><br>java.nio.</em><br>nio和reactor设计模式<br>文件编码，字符集</p>
<h4 id="1-2-7-_Java反射与javassist">1.2.7. Java反射与javassist</h4><p>反射与工厂模式<br>java.lang.reflect.*</p>
<h4 id="1-2-8-_Java序列化">1.2.8. Java序列化</h4><p>java.io. Serializable<br>什么是序列化，为什么序列化<br>序列化与单例模式<br>google序列化protobuf</p>
<h4 id="1-2-9-_虚引用，弱引用，软引用">1.2.9. 虚引用，弱引用，软引用</h4><p>java.lang.ref.*<br>实验这些引用的回收</p>
<h4 id="1-2-10-_熟悉Java系统属性">1.2.10. 熟悉Java系统属性</h4><p>java.util.Properties</p>
<h4 id="1-2-11-_熟悉Annotation用法">1.2.11. 熟悉Annotation用法</h4><p>java.lang.annotation.*</p>
<h4 id="1-2-12-_JMS">1.2.12. JMS</h4><p>javax.jms.*</p>
<h4 id="1-2-13-_JMX">1.2.13. JMX</h4><p>java.lang.management.<em><br>javax.management.</em></p>
<h4 id="1-2-14-_泛型和继承，泛型和擦除">1.2.14. 泛型和继承，泛型和擦除</h4><p>1.2.15. 自动拆箱装箱与字节码<br>1.2.16. 实现Callback<br>1.2.17. java.lang.Void类使用<br>1.2.18. Java Agent，premain函数 ####<br>java.lang.instrument</p>
<h4 id="1-2-19-_单元测试">1.2.19. 单元测试</h4><p>Junit，<a href="http://junit.org/" target="_blank" rel="external">http://junit.org/</a><br>Jmockit，<a href="https://code.google.com/p/jmockit/" target="_blank" rel="external">https://code.google.com/p/jmockit/</a><br>djUnit，<a href="http://works.dgic.co.jp/djunit/" target="_blank" rel="external">http://works.dgic.co.jp/djunit/</a></p>
<h4 id="1-2-20-_Java实现通过正则表达式提取一段文本中的电子邮件，并将@替换为#输出">1.2.20. Java实现通过正则表达式提取一段文本中的电子邮件，并将@替换为#输出</h4><p>java.lang.util.regex.*</p>
<h4 id="1-2-21-_学习使用常用的Java工具库">1.2.21. 学习使用常用的Java工具库</h4><p>commons.lang, commons.*…<br>guava-libraries<br>netty</p>
<h4 id="1-2-22-_什么是API&amp;SPI">1.2.22. 什么是API&amp;SPI</h4><p><a href="http://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="external">http://en.wikipedia.org/wiki/Application_programming_interface</a><br><a href="http://en.wikipedia.org/wiki/Service_provider_interface" target="_blank" rel="external">http://en.wikipedia.org/wiki/Service_provider_interface</a></p>
<h4 id="1-2-23-_参考资料">1.2.23. 参考资料</h4><p>JDK src.zip 源代码<br><a href="http://openjdk.java.net/" target="_blank" rel="external">http://openjdk.java.net/</a><br><a href="http://commons.apache.org/" target="_blank" rel="external">http://commons.apache.org/</a><br><a href="https://code.google.com/p/guava-libraries/" target="_blank" rel="external">https://code.google.com/p/guava-libraries/</a><br><a href="http://netty.io/" target="_blank" rel="external">http://netty.io/</a><br><a href="http://stackoverflow.com/questions/2954372/difference-between-spi-and-api" target="_blank" rel="external">http://stackoverflow.com/questions/2954372/difference-between-spi-and-api</a><br><a href="http://stackoverflow.com/questions/11404230/how-to-implement-the-api-spi-pattern-in-java" target="_blank" rel="external">http://stackoverflow.com/questions/11404230/how-to-implement-the-api-spi-pattern-in-java</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Java工程师成神之路">Java工程师成神之路</h1><h2 id="一、基础篇">一、基础篇</h2><h3 id="1-1_JVM">1.1 JVM</h3><h4 id="1-1-1-_Java内存模型，Java内存管理，Java堆和栈，垃圾回收">1.]]>
    </summary>
    
      <category term="java" scheme="http://blog.chen777.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[easyui作后台(二)]]></title>
    <link href="http://blog.chen777.com/2015/12/02/easyui%E4%BD%9C%E5%90%8E%E5%8F%B0-%E4%BA%8C/"/>
    <id>http://blog.chen777.com/2015/12/02/easyui作后台-二/</id>
    <published>2015-12-02T09:17:39.000Z</published>
    <updated>2015-12-15T09:39:05.302Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><p>easyui作为后台，第一节讲了构造整个系统，然后为了支持欧美等国家，所以我们要国际化。</p>
<a id="more"></a>
<h1 id="实现">实现</h1><p>依赖于springmvc的国际化，我们是使用的是cookie方式。</p>
<pre><code>springmvc.xml
<span class="comment">&lt;!-- i18n --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"messageSource"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"basenames"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">list</span>&gt;</span>
            <span class="tag">&lt;<span class="title">value</span>&gt;</span>i18n/messages<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">list</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"localeResolver"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.servlet.i18n.CookieLocaleResolver"</span> /&gt;</span>

spring.xml
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"messageSource"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span>
<span class="comment">&lt;!-- 国际化信息所在的文件名 --&gt;</span>                     
<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"basename"</span> <span class="attribute">value</span>=<span class="value">"messages"</span> /&gt;</span>   
<span class="comment">&lt;!-- 如果在国际化资源文件中找不到对应代码的信息，就用这个代码作为名称  --&gt;</span>               
<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"useCodeAsDefaultMessage"</span> <span class="attribute">value</span>=<span class="value">"true"</span> /&gt;</span>           
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span> 


实现分为数据层面、JS层面、JSP层面
</code></pre><h2 id="数据库">数据库</h2><p>数据库我们有一个字典表专门是做通用的国际化的，例如：状态的启用禁用，常规的下拉列表等等。那么使用数据字典那么肯定会关联数据字典查询，这样很多同学会说这样效率会低，我们数据库层面添加了redis缓存，数据字典的东西全部都加载在redis缓存中，不会给数据库造成压力。</p>
<p><img src="http://ww2.sinaimg.cn/large/0063lLoQjw1ez0fvqp916j30cf05yaba.jpg" alt="字典表"></p>
<h3 id="常规的国际化">常规的国际化</h3><p>还有就是一些常规内容，我们是添加了3个字段,比如中文标题，英文标题，和繁体标题，这样插入的时候要插入三个字段，查询的时候就要带上request里面的locale，第一个存的是locale对象，后面存的是locale字符串，因为底层开始使用的是对象而我所有的页面处理全是用locale字符串处理的，为了做最少的改动上线就重复了。</p>
<pre><code><span class="comment">/**
 * 国际化设置语言
 * @throws IOException 
 */</span>

@RequestMapping(<span class="string">"setLanguage"</span>)
<span class="keyword">public</span> <span class="literal">void</span> setLanguage(<span class="built_in">String</span> <span class="built_in">locale</span>) throws IOException{
     <span class="built_in">Locale</span> currentLocale = <span class="literal">new</span> <span class="built_in">Locale</span>(<span class="built_in">locale</span>);
     (<span class="literal">new</span> CookieLocaleResolver())<span class="built_in">.</span>setLocale (request, response, currentLocale);
     request<span class="built_in">.</span>getSession()<span class="built_in">.</span>setAttribute(<span class="string">"myLocale"</span>, <span class="literal">new</span> <span class="built_in">Locale</span>(<span class="built_in">locale</span>));
     request<span class="built_in">.</span>getSession()<span class="built_in">.</span>setAttribute(<span class="string">"hehindLocale"</span>, <span class="built_in">locale</span>);
     response<span class="built_in">.</span>getWriter()<span class="built_in">.</span>write(<span class="string">"true"</span>);
}
</code></pre><p><img src="http://ww2.sinaimg.cn/large/0063lLoQgw1ez0g1zuqo1j30eo0a876y.jpg" alt="帮助中心"><br>easyui渲染表格展示字段，只想展示当前语言的某字段的值可以这么处理：</p>
<pre><code><span class="number">1</span>,controller里面获得当前语言的<span class="built_in">locale</span><span class="built_in">.</span>传入SQL中

<span class="keyword">protected</span> <span class="built_in">String</span> getLocale(){
    <span class="comment">//如果session里面没有设置国际化信息，则使用request中的国际化设置</span>
    <span class="built_in">Locale</span> <span class="built_in">locale</span> = request<span class="built_in">.</span>getLocale();
    <span class="keyword">if</span>(request<span class="built_in">.</span>getSession()<span class="built_in">.</span>getAttribute(<span class="string">"myLocale"</span>) != <span class="built_in">null</span>) <span class="built_in">locale</span> = (<span class="built_in">Locale</span>) request<span class="built_in">.</span>getSession()<span class="built_in">.</span>getAttribute(<span class="string">"myLocale"</span>);
    <span class="keyword">return</span> <span class="built_in">locale</span><span class="built_in">.</span>toString();
}

<span class="number">2</span>,SQL处理:
<span class="keyword">select</span> HELP_ID,STATUS,SORT_PC_OR_APP
&lt;<span class="keyword">if</span> test=<span class="string">"LOCALE_LANGUAGE!=null and  LOCALE_LANGUAGE!=''"</span>&gt;
        HELP_MATTER_${LOCALE_LANGUAGE} as HELP_MATTER,
&lt;/<span class="keyword">if</span>&gt;
FROM t_help_conter

这样就可以根据语言动态的查出对应的字段的值。
</code></pre><h2 id="JSP页面">JSP页面</h2><p>JSP页面肯定会引入easyui的语言包,或者其他插件的语言包，也要做到动态处理,文字也要动态处理，文字是配置在properties里面的.使用fmt标签输出    </p>
<pre><code><span class="xml"><span class="tag">&lt;<span class="title">fmt:message</span> <span class="attribute">key</span>=<span class="value">"user.email"</span>/&gt;</span>：

引入这个common.JSP页面所有后台都可以全自动的切换语言
</span>&lt;%<span class="ruby">@ page language=<span class="string">"java"</span> import=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"utf-8"</span></span>%&gt;<span class="xml">
</span>&lt;%<span class="ruby"><span class="variable">@taglib</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span></span>%&gt;<span class="xml">
</span>&lt;%<span class="ruby"><span class="variable">@taglib</span> prefix=<span class="string">"spring"</span> uri=<span class="string">"http://www.springframework.org/tags"</span> </span>%&gt;<span class="xml">
</span>&lt;%<span class="ruby"><span class="variable">@taglib</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> prefix=<span class="string">"fmt"</span> </span>%&gt;<span class="xml">
</span>&lt;%<span class="ruby"><span class="variable">@taglib</span> uri=<span class="string">"http://v.365sji.com/hksj/fmt"</span> prefix=<span class="string">"hksj"</span></span>%&gt;<span class="xml">

<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">var</span>=<span class="value">"ctx"</span> <span class="attribute">value</span>=<span class="value">"${pageContext.request.contextPath}"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">var</span>=<span class="value">"localeLanguage"</span> <span class="attribute">value</span>=<span class="value">"${hehindLocale==null?pageContext.request.locale:hehindLocale}"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript">
<span class="comment">//环境上下文地址 </span>
    <span class="keyword">var</span> webcontext=<span class="string">'${ctx}'</span>;
<span class="comment">//切換語言后的語言 zh_CN</span>
    <span class="keyword">var</span> localeLanguage = <span class="string">'${localeLanguage}'</span>;
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>

<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"${ctx}/js/easyui/themes/default/easyui.css"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"${ctx}/js/easyui/themes/icon.css"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"${ctx}/js/languages/messages_${localeLanguage}.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"${ctx}/js/jsUtils.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"${ctx}/js/easyui/jquery.min.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"${ctx}/js/easyui/jquery.easyui.min.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"${ctx}/js/easyui/locale/easyui-lang-${localeLanguage}.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span>
</code></pre><h2 id="JS">JS</h2><p>JS和properties一样有三个文件，中英繁</p>
<pre><code>messages_zh_CN.js

<span class="keyword">var</span> localSetting = {
    test : <span class="string">'測試'</span>,
    user_userName:<span class="string">'用户名'</span>

};

<span class="function"><span class="keyword">function</span> <span class="title">getLanValue_</span><span class="params">(key)</span> </span>{
    <span class="keyword">return</span> localSetting[key];
}

每个JS文件大概都是如上的构造，然后直接调用getLanValue(<span class="string">'test'</span>)就能取出<span class="string">'测试'</span>,
灵活使用比如渲染easyui的表格的时候列头就可以这么取出:

{
      field:<span class="string">'USER_NAME'</span>,
      title:getLanValue_(<span class="string">'user_userName'</span>),
      width:<span class="number">40</span>,
      sortable:<span class="literal">true</span>,
      align:<span class="string">'center'</span>,
}
</code></pre><p>参考：<br><a href="http://my.oschina.net/u/615618/blog/161638" target="_blank" rel="external">springmvc国际化</a><br>细节太多，说的很乱，而且散，有什么问题直接留言。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1><p>easyui作为后台，第一节讲了构造整个系统，然后为了支持欧美等国家，所以我们要国际化。</p>]]>
    
    </summary>
    
      <category term="easyui" scheme="http://blog.chen777.com/tags/easyui/"/>
    
      <category term="springmvc" scheme="http://blog.chen777.com/tags/springmvc/"/>
    
      <category term="国际化" scheme="http://blog.chen777.com/tags/%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[easyui作后台(一)]]></title>
    <link href="http://blog.chen777.com/2015/11/30/easyui%E4%BD%9C%E5%90%8E%E5%8F%B0-%E4%B8%80/"/>
    <id>http://blog.chen777.com/2015/11/30/easyui作后台-一/</id>
    <published>2015-11-30T02:50:31.000Z</published>
    <updated>2015-12-01T07:51:16.973Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><p>jQuery EasyUI是一组基于jQuery的UI插件集合体，而jQuery EasyUI的目标就是帮助web开发者更轻松的打造出功能丰富并且美观的UI界面。开发者不需要编写复杂的javascript，也不需要对css样式有深入的了解，开发者需要了解的只有一些简单的html标签。<br><a id="more"></a></p>
<p><a href="http://www.jeasyui.com/" target="_blank" rel="external">英文官网,建议翻墙访问英文官网</a></p>
<p><a href="http://www.jeasyui.net/plugins/183.html" target="_blank" rel="external">中文官网,垃圾广告多。可以使用Chrome集成AdBlock拦截广告插件</a></p>
<h1 id="使用">使用</h1><pre><code>去官网去下载一个easyui的包，然后<span class="keyword">copy</span>到java项目中，放在js文件夹下。（可以先用Hbuilder试玩一下easyui的各种需求）然后就开始搞首页啦。
</code></pre><p><img src="http://ww4.sinaimg.cn/large/0063lLoQjw1eyk5e7ueevj31hc0qc0x4.jpg" alt="index.jsp"></p>
<h1 id="首页功能分析">首页功能分析</h1><pre><code>左边的树形菜单，<span class="keyword">tabs</span>右键菜单，国际化。
</code></pre><h1 id="实现">实现</h1><pre><code>第一节只展示页面渲染，实现页面整体构造
</code></pre><h2 id="index-jsp">index.jsp</h2><pre><code><span class="xml"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">page</span> <span class="attribute">language</span>=<span class="value">"java"</span> <span class="attribute">import</span>=<span class="value">"java.util.*"</span> <span class="attribute">pageEncoding</span>=<span class="value">"UTF-8"</span><span class="value">%</span>&gt;</span>
<span class="tag">&lt;<span class="title">%@include</span> <span class="attribute">file</span>=<span class="value">"/WEB-INF/jsp/common/taglibs.jsp"</span> %&gt;</span>
<span class="doctype">&lt;!DOCTYPE HTML&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
  <span class="tag">&lt;<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">title</span>&gt;</span><span class="tag">&lt;/<span class="title">title</span>&gt;</span>
    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"pragma"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"cache-control"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"expires"</span> <span class="attribute">content</span>=<span class="value">"0"</span>&gt;</span>    
    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"keywords"</span> <span class="attribute">content</span>=<span class="value">"keyword1,keyword2,keyword3"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"description"</span> <span class="attribute">content</span>=<span class="value">"This is my page"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"${ctx}/css/index.css"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"${ctx}/css/zTreeStyle.css"</span> /&gt;</span>
    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"${ctx}/favicon.ico"</span> <span class="attribute">type</span>=<span class="value">"image/x-icon"</span> <span class="attribute">rel</span>=<span class="value">"icon"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"${ctx}/js/jquery.ztree.core-3.5.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"${ctx}/js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">head</span>&gt;</span>

 <span class="tag">&lt;<span class="title">body</span> <span class="attribute">class</span>=<span class="value">"easyui-layout"</span> <span class="attribute">id</span>=<span class="value">"mainBody"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">region</span>=<span class="value">"north"</span> <span class="attribute">split</span>=<span class="value">"true"</span> <span class="attribute">class</span>=<span class="value">"header"</span>&gt;</span>
           <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"${ctx}/images/logo.png"</span> <span class="attribute">class</span>=<span class="value">"logo l"</span>&gt;</span>

           <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"r"</span> <span class="attribute">style</span>=<span class="value">"color: red"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"theTime"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;<span class="tag">&lt;<span class="title">spring:message</span> <span class="attribute">code</span>=<span class="value">"top.hello"</span>/&gt;</span>!
            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">'javascript:void(0)'</span> <span class="attribute">id</span>=<span class="value">"setLanguage"</span> <span class="attribute">class</span>=<span class="value">"pwd_reset"</span>&gt;</span>语言设置<span class="tag">&lt;/<span class="title">a</span>&gt;</span> 
            <span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"${userType=='1'}"</span>&gt;</span><span class="tag">&lt;<span class="title">spring:message</span> <span class="attribute">code</span>=<span class="value">"top.username"</span>/&gt;</span><span class="tag">&lt;/<span class="title">c:if</span>&gt;</span>
            ${adminInfo.nickname}<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:void(0);"</span> <span class="attribute">id</span>=<span class="value">"pwdReset"</span> <span class="attribute">class</span>=<span class="value">"pwd_reset"</span>&gt;</span><span class="tag">&lt;<span class="title">spring:message</span> <span class="attribute">code</span>=<span class="value">"top.reset"</span>/&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"${ctx}/admin/exitAdmin.do"</span> <span class="attribute">class</span>=<span class="value">"exit_system"</span>&gt;</span><span class="tag">&lt;<span class="title">spring:message</span> <span class="attribute">code</span>=<span class="value">"top.outsystem"</span>/&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">p</span>&gt;</span> 
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">region</span>=<span class="value">"west"</span> <span class="attribute">split</span>=<span class="value">"true"</span> <span class="attribute">title</span>=<span class="value">"导航菜单"</span> <span class="attribute">style</span>=<span class="value">"width: 180px;overflow:hidden;"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"menuId"</span> <span class="attribute">class</span>=<span class="value">"easyui-accordion"</span> <span class="attribute">fit</span>=<span class="value">"true"</span> <span class="attribute">border</span>=<span class="value">"false"</span>&gt;</span>

        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">region</span>=<span class="value">"center"</span> <span class="attribute">id</span>=<span class="value">"mainPanle"</span> <span class="attribute">style</span>=<span class="value">"background: #eee;overflow:hidden;"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"tabs"</span> <span class="attribute">class</span>=<span class="value">"easyui-tabs"</span> <span class="attribute">fit</span>=<span class="value">"true"</span> <span class="attribute">border</span>=<span class="value">"false"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">title</span>=<span class="value">"主页"</span> <span class="attribute">style</span>=<span class="value">"padding: 20px;"</span> <span class="attribute">id</span>=<span class="value">"home"</span>&gt;</span>
                <span class="tag">&lt;<span class="title">h1</span>&gt;</span> Welcome...<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>

        <span class="comment">&lt;!-- tabs右键菜单 --&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"rightMenu"</span> <span class="attribute">class</span>=<span class="value">"easyui-menu"</span> <span class="attribute">style</span>=<span class="value">"position: absolute;margin: 0;padding: 2px;border-width: 1px;border-style: solid; overflow: hidden;"</span>&gt;</span>
             <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mm-tabclose"</span> <span class="attribute">data-options</span>=<span class="value">"name:1"</span> &gt;</span>关闭<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mm-tabcloseall"</span> <span class="attribute">data-options</span>=<span class="value">"name:2"</span>&gt;</span>全部关闭<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mm-tabcloseother"</span> <span class="attribute">data-options</span>=<span class="value">"name:3"</span>&gt;</span>除此之外全部关闭<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
             <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"menu-sep"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mm-tabcloseright"</span> <span class="attribute">data-options</span>=<span class="value">"name:4"</span>&gt;</span>当前页右侧全部关闭<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mm-tabcloseleft"</span> <span class="attribute">data-options</span>=<span class="value">"name:5"</span>&gt;</span>当前页左侧全部关闭<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mm-tabclose"</span> <span class="attribute">name</span>=<span class="value">"6"</span>&gt;</span>刷新<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>

        <span class="comment">&lt;!-- 重置密码 --&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"resetWin"</span> <span class="attribute">class</span>=<span class="value">"easyui-window"</span>  <span class="attribute">style</span>=<span class="value">"height: 160px;width: 380px; overflow-y:auto;"</span> <span class="attribute">data-options</span>=<span class="value">"modal:true,closed:true"</span> &gt;</span>
            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">hidden</span> <span class="attribute">id</span>=<span class="value">"id"</span> <span class="attribute">value</span>=<span class="value">"${USER_SESSION_INFO.ADMIN_ID}"</span>/&gt;</span>
            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"margin-left:10px;"</span>&gt;</span>
                  <span class="tag">&lt;<span class="title">table</span> <span class="attribute">class</span>=<span class="value">"mainTable"</span>&gt;</span>
                      <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span> &gt;</span>旧密码：<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">id</span>=<span class="value">"password_old"</span> /&gt;</span> 
                    <span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span> &gt;</span>新密码：<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">id</span>=<span class="value">"password"</span> /&gt;</span>
                    <span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span> &gt;</span>确认新密码：<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">id</span>=<span class="value">"password1"</span> /&gt;</span>
                    <span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span> <span class="attribute">colspan</span>=<span class="value">"2"</span> <span class="attribute">style</span>=<span class="value">"text-align: right"</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">class</span>=<span class="value">"easyui-linkbutton"</span> <span class="attribute">onclick</span>=<span class="value">"resetPassword()"</span> <span class="attribute">id</span>=<span class="value">"baocunid"</span>&gt;</span>保存<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">class</span>=<span class="value">"easyui-linkbutton"</span> <span class="attribute">onclick</span>=<span class="value">"closeResetWin()"</span>&gt;</span>取消<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
                    <span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>

       <span class="comment">&lt;!-- 语言选择 --&gt;</span> 
       <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"languageWin"</span> <span class="attribute">class</span>=<span class="value">"easyui-window"</span>  <span class="attribute">style</span>=<span class="value">"height: 160px;width: 380px; overflow-y:auto;"</span> <span class="attribute">data-options</span>=<span class="value">"modal:true,closed:true"</span> &gt;</span>
               <span class="tag">&lt;<span class="title">form</span> <span class="attribute">style</span>=<span class="value">"padding:20px;"</span>&gt;</span>
                   <span class="tag">&lt;<span class="title">table</span> <span class="attribute">style</span>=<span class="value">"width:320px;"</span>&gt;</span>
                   <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">c:if</span>&gt;</span>
                       <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">'language'</span> &lt;<span class="attribute">c:if</span> <span class="attribute">test</span>=<span class="value">"${localeLanguage=='zh_CN'}"</span>&gt;</span>checked='checked'<span class="tag">&lt;/<span class="title">c:if</span>&gt;</span> value='zh_CN'/&gt;简体中文<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                       <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">'language'</span> &lt;<span class="attribute">c:if</span> <span class="attribute">test</span>=<span class="value">"${localeLanguage=='zh_HK'}"</span>&gt;</span>checked='checked'<span class="tag">&lt;/<span class="title">c:if</span>&gt;</span> value='zh_HK'/&gt;繁体中文<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                       <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">'language'</span> &lt;<span class="attribute">c:if</span> <span class="attribute">test</span>=<span class="value">"${localeLanguage=='en_US'}"</span>&gt;</span>checked='checked'<span class="tag">&lt;/<span class="title">c:if</span>&gt;</span> value='en_US'/&gt;English<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                   <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
                   <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                       <span class="tag">&lt;<span class="title">td</span> <span class="attribute">colspan</span>=<span class="value">"2"</span> <span class="attribute">align</span>=<span class="value">"center"</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">class</span>=<span class="value">"easyui-linkbutton"</span> <span class="attribute">onclick</span>=<span class="value">"setLanguage()"</span> <span class="attribute">id</span>=<span class="value">"baocunid"</span>&gt;</span>保存<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">class</span>=<span class="value">"easyui-linkbutton"</span> <span class="attribute">onclick</span>=<span class="value">"closeLanguageWin()"</span>&gt;</span>取消<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
                    <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                   <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
                   <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
               <span class="tag">&lt;/<span class="title">form</span>&gt;</span>
       <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span></span>
</code></pre><h2 id="taglibs-jsp(共用的东西，提取出一个jsp页面，其他页面只用引入即可)">taglibs.jsp(共用的东西，提取出一个jsp页面，其他页面只用引入即可)</h2><pre><code><span class="xml"></span>&lt;%<span class="ruby">@ page language=<span class="string">"java"</span> import=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"utf-8"</span></span>%&gt;<span class="xml">
</span>&lt;%<span class="ruby"><span class="variable">@taglib</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span></span>%&gt;<span class="xml">
</span>&lt;%<span class="ruby"><span class="variable">@taglib</span> prefix=<span class="string">"spring"</span> uri=<span class="string">"http://www.springframework.org/tags"</span> </span>%&gt;<span class="xml">
</span>&lt;%<span class="ruby"><span class="variable">@taglib</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> prefix=<span class="string">"fmt"</span> </span>%&gt;<span class="xml">
</span>&lt;%<span class="ruby"><span class="variable">@taglib</span> uri=<span class="string">"http://v.365sji.com/hksj/fmt"</span> prefix=<span class="string">"hksj"</span></span>%&gt;<span class="xml">

<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">var</span>=<span class="value">"ctx"</span> <span class="attribute">value</span>=<span class="value">"${pageContext.request.contextPath}"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">var</span>=<span class="value">"localeLanguage"</span> <span class="attribute">value</span>=<span class="value">"${myLocale==null?pageContext.request.locale:myLocale}"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"${ctx}/js/easyui/themes/default/easyui.css"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"${ctx}/js/easyui/themes/icon.css"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"${ctx}/js/languages/messages_${localeLanguage}.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"${ctx}/js/jsUtils.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"${ctx}/js/easyui/jquery.min.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"${ctx}/js/easyui/jquery.easyui.min.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"${ctx}/js/easyui/locale/easyui-lang-${localeLanguage}.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span>
</code></pre><h2 id="index-js">index.js</h2><pre><code>    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
    initTime();

    InitLeftMenu();

    $(<span class="string">'body'</span>).layout();

  <span class="comment">//监听右键事件，创建右键菜单</span>
    $(<span class="string">'#tabs'</span>).tabs({
        onContextMenu:<span class="function"><span class="keyword">function</span>(<span class="params">e, title,index</span>)</span>{
            e.preventDefault();
            <span class="keyword">if</span>(index&gt;<span class="number">0</span>){
                $(<span class="string">'#rightMenu'</span>).menu(<span class="string">'show'</span>, {
                    left: e.pageX,
                    top: e.pageY
                }).data(<span class="string">"tabTitle"</span>, title);
            }
        }
    });

    <span class="comment">//右键菜单click</span>
    $(<span class="string">"#rightMenu"</span>).menu({
        onClick : <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>{
            closeTab(<span class="keyword">this</span>, item.name);
        }
    });

    <span class="comment">//设置语言</span>
    $(<span class="string">'#setLanguage'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        $(<span class="string">'#languageWin'</span>).window(<span class="string">'open'</span>); 
    });
});

<span class="comment">/**
 * 初始化左边的菜单栏
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">InitLeftMenu</span>(<span class="params"></span>) </span>{
    hoverMenuItem();
    $.post(<span class="string">'getLeftMenu.do'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">menus</span>)</span>{
        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; menus.length; i++) 
        {
            <span class="keyword">var</span> str=<span class="string">""</span>;
            <span class="keyword">if</span>(menus[i].leaf==<span class="string">"1"</span>)
            {
                str+=<span class="string">"&lt;div title='"</span>+menus[i].menu_name+<span class="string">"' style='overflow:auto;' icon='icon-edit' &gt;"</span>;
                str+=<span class="string">"&lt;div&gt;&lt;ul&gt;&lt;li&gt;"</span>;
                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; menus.length; j++)  <span class="comment">//拼接子目录</span>
                {
                    <span class="keyword">if</span>(menus[i].menu_id==menus[j].parent_menu)
                    {
                        str+=<span class="string">"&lt;div&gt;&lt;a href=\"javascript:void(0);\" onclick=\"addTab('"</span>+JsUtils.getRootPath()+<span class="string">'/'</span>+menus[j].url+<span class="string">"','"</span>+menus[j].menu_name+<span class="string">"')\"&gt;"</span>+menus[j].menu_name+<span class="string">"&lt;/a&gt;&lt;/div&gt;"</span>;
                    }
                }
                str+=<span class="string">"&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;"</span>;

                $(<span class="string">'#menuId'</span>).accordion(<span class="string">'add'</span>, {
                    title : menus[i].menu_name,
                    content : str,
                  <span class="comment">//  iconCls : 'icon ' + sm.icon</span>
                });

            }
        }

        <span class="keyword">var</span> pp = $(<span class="string">'#menuId'</span>).accordion(<span class="string">'panels'</span>);
        <span class="keyword">var</span> t = pp[<span class="number">0</span>].panel(<span class="string">'options'</span>).title;
        $(<span class="string">'#menuId'</span>).accordion(<span class="string">'select'</span>, t);
    });


}

<span class="comment">/**
 * 菜单项鼠标Hover
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">hoverMenuItem</span>(<span class="params"></span>) </span>{
    $(<span class="string">".easyui-accordion"</span>).find(<span class="string">'a'</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
        $(<span class="keyword">this</span>).parent().addClass(<span class="string">"hover"</span>);
    }, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
        $(<span class="keyword">this</span>).parent().removeClass(<span class="string">"hover"</span>);
    });
}

<span class="comment">/**
 * 添加tab
 * @param url
 * @param tabTitle
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">addTab</span>(<span class="params">url ,tabTitle</span>) </span>{
    <span class="keyword">if</span> (!$(<span class="string">'#tabs'</span>).tabs(<span class="string">'exists'</span>, tabTitle)) {
        $(<span class="string">'#tabs'</span>).tabs(<span class="string">'add'</span>, {
            title: tabTitle,
            content: createFrame(url),
            closable: <span class="literal">true</span>,
            width: $(<span class="string">'#mainPanle'</span>).width() - <span class="number">10</span>,
            height: $(<span class="string">'#mainPanle'</span>).height() - <span class="number">26</span>
        });
    } <span class="keyword">else</span> {
        $(<span class="string">'#tabs'</span>).tabs(<span class="string">'select'</span>, tabTitle);
    }
}

<span class="function"><span class="keyword">function</span> <span class="title">createFrame</span>(<span class="params">url</span>) </span>{
    <span class="keyword">var</span> s = <span class="string">'&lt;iframe name="mainFrame" scrolling="no" frameborder="0"  src="'</span> + url + <span class="string">'" style="width:100%;height:100%;"&gt;&lt;/iframe&gt;'</span>;
    <span class="keyword">return</span> s;
}

<span class="comment">//删除Tabs</span>
<span class="function"><span class="keyword">function</span> <span class="title">closeTab</span>(<span class="params">menu, type</span>) </span>{
    <span class="keyword">var</span> allTabs = $(<span class="string">"#tabs"</span>).tabs(<span class="string">'tabs'</span>);
    <span class="keyword">var</span> allTabtitle = [];
    $.each(allTabs, <span class="function"><span class="keyword">function</span> (<span class="params">i, n</span>) </span>{
        <span class="keyword">var</span> opt = $(n).panel(<span class="string">'options'</span>);
        <span class="keyword">if</span> (opt.closable)
            allTabtitle.push(opt.title);
    });
    <span class="keyword">var</span> curTabTitle = $(menu).data(<span class="string">"tabTitle"</span>);
    <span class="keyword">var</span> curTabIndex = $(<span class="string">"#tabs"</span>).tabs(<span class="string">"getTabIndex"</span>, $(<span class="string">"#tabs"</span>).tabs(<span class="string">"getTab"</span>, curTabTitle));
    <span class="keyword">switch</span> (type) {
        <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//关闭当前</span>
            $(<span class="string">"#tabs"</span>).tabs(<span class="string">"close"</span>, curTabIndex);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//全部关闭</span>
            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allTabtitle.length; i++) {
                $(<span class="string">'#tabs'</span>).tabs(<span class="string">'close'</span>, allTabtitle[i]);
            }
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//除此之外全部关闭</span>
            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allTabtitle.length; i++) {
                <span class="keyword">if</span> (curTabTitle != allTabtitle[i])
                    $(<span class="string">'#tabs'</span>).tabs(<span class="string">'close'</span>, allTabtitle[i]);
            }
            $(<span class="string">'#tabs'</span>).tabs(<span class="string">'select'</span>, curTabTitle);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//当前侧面右边</span>
            <span class="keyword">for</span> (<span class="keyword">var</span> i = curTabIndex; i &lt; allTabtitle.length; i++) {
                $(<span class="string">'#tabs'</span>).tabs(<span class="string">'close'</span>, allTabtitle[i]);
            }
            $(<span class="string">'#tabs'</span>).tabs(<span class="string">'select'</span>, curTabTitle);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">5</span>: <span class="comment">//当前侧面左边</span>
            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; curTabIndex - <span class="number">1</span>; i++) {
                $(<span class="string">'#tabs'</span>).tabs(<span class="string">'close'</span>, allTabtitle[i]);
            }
            $(<span class="string">'#tabs'</span>).tabs(<span class="string">'select'</span>, curTabTitle);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">6</span>: <span class="comment">//刷新</span>
            <span class="keyword">var</span> panel = $(<span class="string">"#tabs"</span>).tabs(<span class="string">"getTab"</span>, curTabTitle).panel(<span class="string">"refresh"</span>);
            <span class="keyword">break</span>;
    }
}

<span class="function"><span class="keyword">function</span> <span class="title">initTime</span>(<span class="params"></span>)</span>{
    <span class="comment">/**
     * 显示系统时钟
     */</span>
    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();
    <span class="keyword">var</span> y=date.getFullYear();
    <span class="keyword">var</span> mon=date.getMonth()+<span class="number">1</span>;
    mon = mon &lt; <span class="number">10</span> ? <span class="string">'0'</span> + mon : mon;
    <span class="keyword">var</span> day=date.getDate();
    day = day &lt; <span class="number">10</span> ? <span class="string">'0'</span> + day : day;
    <span class="keyword">var</span> h = date.getHours();
    h = h &lt; <span class="number">10</span> ? <span class="string">'0'</span> + h : h;
    <span class="keyword">var</span> m = date.getMinutes();
    m = m &lt; <span class="number">10</span> ? <span class="string">'0'</span> + m : m;
    <span class="keyword">var</span> s = date.getSeconds();
    s = s &lt; <span class="number">10</span> ? <span class="string">'0'</span> + s : s;
    $(<span class="string">'#theTime'</span>).html(getLanValue_(<span class="string">"root_showtime"</span>)+y+<span class="string">"-"</span>+mon+<span class="string">"-"</span>+day+<span class="string">" "</span>+h + <span class="string">":"</span> + m + <span class="string">":"</span> + s);
}
setInterval(<span class="string">"initTime()"</span>, <span class="number">1000</span>);


<span class="function"><span class="keyword">function</span> <span class="title">setLanguage</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> locale=$(<span class="string">':radio:checked'</span>).val();
    $.post(JsUtils.getRootPath()+<span class="string">'/admin/setLanguage.do'</span>,{locale:locale},<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        closeLanguageWin();
        location.reload(<span class="literal">true</span>); 
    });
}

<span class="function"><span class="keyword">function</span> <span class="title">closeLanguageWin</span>(<span class="params"></span>)</span>{
    $(<span class="string">'#languageWin'</span>).window(<span class="string">'close'</span>);
}
</code></pre><h2 id="左边菜单栏的表结构">左边菜单栏的表结构</h2><p><img src="http://ww3.sinaimg.cn/large/0063lLoQjw1eyk69oeo0oj30fr0a3mzr.jpg" alt="表结构"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="介绍">介绍</h1><p>jQuery EasyUI是一组基于jQuery的UI插件集合体，而jQuery EasyUI的目标就是帮助web开发者更轻松的打造出功能丰富并且美观的UI界面。开发者不需要编写复杂的javascript，也不需要对css样式有深入的了解，开发者需要了解的只有一些简单的html标签。<br>]]>
    
    </summary>
    
      <category term="easyui" scheme="http://blog.chen777.com/tags/easyui/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[webuploader(ssi)图片上传]]></title>
    <link href="http://blog.chen777.com/2015/10/21/webuploader-ssi-%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    <id>http://blog.chen777.com/2015/10/21/webuploader-ssi-图片上传/</id>
    <published>2015-10-21T03:19:20.000Z</published>
    <updated>2015-10-22T00:53:00.551Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>前面项目中使用的是ajaxfileupload作为上传工具我感觉这个工具不是很方便，而且很多参数校验要到后台去处理，扩展性和可维护性低。我希望有一个插件在前台做更多的校验，不需要到后台做检验。这个时候<a href="http://fex.baidu.com/webuploader/" target="_blank" rel="external">webuploader</a>出来了。并且极为重要的一点是支持跨域上传文件或者图片。</p>
<a id="more"></a>
<h1 id="使用">使用</h1><p>首先你需要到webuploader去了解基本用法和参数，我使用的是ssi架构。</p>
<h2 id="js">js</h2><pre><code>// 图片上传demo
jQuery(<span class="keyword">function</span>() {
var $ = jQuery,
    <span class="variable">$list</span> = $(<span class="string">'#fileList'</span>),
    // 优化retina, 在retina下这个值是<span class="number">2</span>
    ratio = window.devicePixelRatio || <span class="number">1</span>,

    // 缩略图大小
    thumbnailWidth = <span class="number">200</span> * ratio,
    thumbnailHeight = <span class="number">200</span> * ratio,

    // Web Uploader实例
    uploader;

// 初始化Web Uploader
uploader = WebUploader.create({

    // 自动上传。
    auto: true,

    // swf文件路径
    swf: <span class="string">'Uploader.swf'</span>,

    // 文件接收服务端。
    server: <span class="string">'admin/subscribe/uploadImg.action'</span>,

    // 选择文件的按钮。可选。
    // 内部根据当前运行是创建，可能是input元素，也可能是flash.
    pick: <span class="string">'#filePicker'</span>,

    // 只允许选择文件，可选。
    accept: {
        title: <span class="string">'Images'</span>,
        extensions: <span class="string">'gif,jpg,jpeg,bmp,png'</span>,
        mimeTypes: <span class="string">'image/*'</span>
    },
    fileVal:<span class="string">'filedata'</span>, //fileVal {Object} [可选] [默认值：<span class="string">'file'</span>] 设置文件上传域的name。

    fileNumLimit : <span class="number">1</span> 
});


// 当有文件添加进来的时候
uploader.on( <span class="string">'fileQueued'</span>, function( file ) {
    var <span class="variable">$li</span> = $(
            <span class="string">'&lt;div id="'</span> + file.id + <span class="string">'" class="file-item thumbnail"&gt;'</span> +
                <span class="string">'&lt;img&gt;'</span> +
                <span class="string">'&lt;div class="info"&gt;'</span> + file.name + <span class="string">'&lt;/div&gt;'</span> +
            <span class="string">'&lt;/div&gt;'</span>
            ),
        <span class="variable">$img</span> = <span class="variable">$li</span>.find(<span class="string">'img'</span>);

    <span class="variable">$list</span>.append( <span class="variable">$li</span> );

    // 创建缩略图
    uploader.makeThumb( file, function( error, src ) {
        if ( error ) {
            <span class="variable">$img</span>.replaceWith(<span class="string">'&lt;span&gt;不能预览&lt;/span&gt;'</span>);
            return;
        }

        <span class="variable">$img</span>.attr( <span class="string">'src'</span>, src );
    }, thumbnailWidth, thumbnailHeight );
});

// 文件上传过程中创建进度条实时显示。
uploader.on( <span class="string">'uploadProgress'</span>, function( file, percentage ) {
    var <span class="variable">$li</span> = $( <span class="string">'#'</span>+file.id ),
        <span class="variable">$percent</span> = <span class="variable">$li</span>.find(<span class="string">'.progress span'</span>);

    // 避免重复创建
    if ( !<span class="variable">$percent</span>.length ) {
        <span class="variable">$percent</span> = $(<span class="string">'&lt;p class="progress"&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;'</span>)
                .appendTo( <span class="variable">$li</span> )
                .find(<span class="string">'span'</span>);
    }

    <span class="variable">$percent</span>.css( <span class="string">'width'</span>, percentage * <span class="number">100</span> + <span class="string">'%'</span> );
});

// 文件上传成功，给item添加成功class, 用样式标记上传成功。
uploader.on( <span class="string">'uploadSuccess'</span>, function( file ) {
    $( <span class="string">'#'</span>+file.id ).addClass(<span class="string">'upload-state-done'</span>);
});

// 文件上传失败，现实上传出错。
uploader.on( <span class="string">'uploadError'</span>, function( file ) {
    var <span class="variable">$li</span> = $( <span class="string">'#'</span>+file.id ),
        <span class="variable">$error</span> = <span class="variable">$li</span>.find(<span class="string">'div.error'</span>);

    // 避免重复创建
    if ( !<span class="variable">$error</span>.length ) {
        <span class="variable">$error</span> = $(<span class="string">'&lt;div class="error"&gt;&lt;/div&gt;'</span>).appendTo( <span class="variable">$li</span> );
    }

    <span class="variable">$error</span>.text(<span class="string">'上传失败'</span>);
});

// 完成上传完了，成功或者失败，先删除进度条。
uploader.on( <span class="string">'uploadComplete'</span>, function( file ) {
    $( <span class="string">'#'</span>+file.id ).find(<span class="string">'.progress'</span>).remove();
});
}); 
</code></pre><h2 id="jsp">jsp</h2><pre><code><span class="xml"></span>&lt;%<span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span>
pageEncoding=<span class="string">"UTF-8"</span></span>%&gt;<span class="xml">
</span>&lt;%<span class="ruby">@ <span class="keyword">include</span> file=<span class="string">"/admin/common/jsp/globalManagement.jsp"</span></span>%&gt;<span class="xml">    

<span class="doctype">&lt;!DOCTYPE html&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
    <span class="tag">&lt;<span class="title">head</span>&gt;</span>
        <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">title</span>&gt;</span>webuploader<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
        <span class="tag">&lt;<span class="title">base</span> <span class="attribute">href</span>=<span class="value">"</span></span></span>&lt;%=<span class="ruby">basePath</span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span>&gt;</span>
        <span class="comment">&lt;!--引入CSS--&gt;</span>
        <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"</span></span></span>&lt;%=<span class="ruby">basePath</span>%&gt;<span class="xml"><span class="tag"><span class="value">admin/webuploader/webuploader.css"</span>&gt;</span>

        <span class="comment">&lt;!--引入JS--&gt;</span>
        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"</span></span></span>&lt;%=<span class="ruby">basePath</span>%&gt;<span class="xml"><span class="tag"><span class="value">common/js/jquery-1.7.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"</span></span></span>&lt;%=<span class="ruby">basePath</span>%&gt;<span class="xml"><span class="tag"><span class="value">admin/webuploader/webuploader.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"</span></span></span>&lt;%=<span class="ruby">basePath</span>%&gt;<span class="xml"><span class="tag"><span class="value">admin/webuploader/upload.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">head</span>&gt;</span>

    <span class="tag">&lt;<span class="title">body</span>&gt;</span>
        <span class="comment">&lt;!--dom结构部分--&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"uploader-demo"</span>&gt;</span>
            <span class="comment">&lt;!--用来存放item--&gt;</span>
            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span>  <span class="attribute">name</span>=<span class="value">"fileName"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span>/&gt;</span>    
             <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"fileList"</span> <span class="attribute">class</span>=<span class="value">"uploader-list"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span> 
            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"filePicker"</span>&gt;</span>选择图片<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span></span>
</code></pre><h2 id="action">action</h2><pre><code><span class="comment">/**
 * 图片上传
 */</span>
<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadImg</span><span class="params">()</span></span>{
    subscribeService.upload(filedata,filedataFileName);
}
</code></pre><h2 id="service">service</h2><pre><code><span class="keyword">public</span> <span class="keyword">String</span> upload(File filedata,<span class="keyword">String</span> fileName,<span class="built_in">int</span> <span class="variable">width</span>,<span class="built_in">int</span> <span class="variable">height</span>){
    ServletActionContext.getResponse().setContentType(<span class="string">"text/html; charset=utf-8"</span>);
    <span class="keyword">String</span> json= <span class="string">""</span>;
      <span class="keyword">String</span> path1=<span class="string">""</span>;
      <span class="keyword">if</span>(filedata!=<span class="keyword">null</span>){

        <span class="comment">// 获取缩略图保存的文件夹</span>
        <span class="keyword">String</span> filePath = PropertyUtils.getProperty(<span class="string">"ccsimgupload"</span>);
            <span class="comment">// 获取网站基础路径</span>
        <span class="keyword">String</span> baseurl = PropertyUtils.getProperty(<span class="string">"baseurl"</span>);

        <span class="comment">// 获取到文件的绝对路径</span>
        <span class="keyword">String</span> fd = DateUtil.formatDate(<span class="keyword">new</span> Date(), <span class="string">"yyyyMMdd"</span>);
        <span class="keyword">String</span> uploadPath =  filePath + fd;
        <span class="keyword">String</span> newFileName = System.nanoTime()
                + UploadFileUtil.getFileName(fileName);
        path1 = UploadFileUtil.uploadFileInfo(filedata,uploadPath+<span class="string">"/"</span>, newFileName.toLowerCase());
        <span class="keyword">String</span> path = ServletActionContext.getServletContext().getContextPath();
        path1 = baseurl + path + path1;            
      }
        <span class="keyword">try</span> {
            ServletActionContext.getResponse().getWriter().write(json);
        } <span class="keyword">catch</span> (IOException e) {
            e.printStackTrace();
        }
      <span class="keyword">return</span> <span class="keyword">null</span>;
 }
</code></pre><p>页面效果如图：<br><img src="http://ww2.sinaimg.cn/large/0063lLoQgw1ex8lyaxc1tj307v06y3yt.jpg" alt="大功告成"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>前面项目中使用的是ajaxfileupload作为上传工具我感觉这个工具不是很方便，而且很多参数校验要到后台去处理，扩展性和可维护性低。我希望有一个插件在前台做更多的校验，不需要到后台做检验。这个时候<a href="http://fex.baidu.com/webuploader/">webuploader</a>出来了。并且极为重要的一点是支持跨域上传文件或者图片。</p>]]>
    
    </summary>
    
      <category term="webuploader" scheme="http://blog.chen777.com/tags/webuploader/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown其他用法]]></title>
    <link href="http://blog.chen777.com/2015/10/16/markdown%E5%85%B6%E4%BB%96%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.chen777.com/2015/10/16/markdown其他用法/</id>
    <published>2015-10-16T01:15:56.000Z</published>
    <updated>2015-10-16T03:00:22.414Z</updated>
    <content type="html"><![CDATA[<p>我用markdown写博客的时候感觉有点力不从心，还不如html好写，当初是这么感觉的，我想要强调一下字体的大小啊，颜色啊，markdown虽然都有，但是又不是很灵活，后来仔细看文档发现其实Markdown兼容 HTML，所以需要一定的html基础。还是今天我特意留下这篇博客记录它的一些其他用法，<a href="http://www.cnblogs.com/rossoneri/p/4446440.html#_label10" target="_blank" rel="external">基本语法</a>不做介绍.<br><a id="more"></a></p>
<p>这个是字体的：<a href="http://www.bubuko.com/infodetail-826462.html" target="_blank" rel="external">字体设置</a><br><br><strong>强调字体</strong> </p><p style="color:red;font-size:20px;">字体颜色大小设置</p><p><br>图片大小宽度高度也可以使用img标签转换<img src="" width="" height="">这种格式<br><a href="http://wuchong.me/blog/2014/12/13/hexo-theme-creating-image-styles/" target="_blank" rel="external">图片使用</a><br>暂时我只使用到这些。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我用markdown写博客的时候感觉有点力不从心，还不如html好写，当初是这么感觉的，我想要强调一下字体的大小啊，颜色啊，markdown虽然都有，但是又不是很灵活，后来仔细看文档发现其实Markdown兼容 HTML，所以需要一定的html基础。还是今天我特意留下这篇博客记录它的一些其他用法，<a href="http://www.cnblogs.com/rossoneri/p/4446440.html#_label10">基本语法</a>不做介绍.<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://blog.chen777.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo字体问题]]></title>
    <link href="http://blog.chen777.com/2015/10/15/hexo%E5%AD%97%E4%BD%93%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.chen777.com/2015/10/15/hexo字体问题/</id>
    <published>2015-10-15T09:36:21.000Z</published>
    <updated>2015-10-19T02:15:06.996Z</updated>
    <content type="html"><![CDATA[<p>hexo字体问题困扰了我好久了，我按照官方文档<a href="http://theme-next.iissnan.com/faqs.html#自定义字体" target="_blank" rel="external">http://theme-next.iissnan.com/faqs.html#自定义字体</a>设置了也没用，然后也自己折腾了半天就是没有效果，原来是需要<font color="red">hexo clean</font>一下然后重新提交部署到git才生效,很多实用next主题的也有这个问题.<br><a id="more"></a></p>
<p>先看图片对面文字<br><img src="http://ww1.sinaimg.cn/large/0063lLoQgw1ex1yo34wbnj30uz0prtdv.jpg?300*12" alt="图1" title="图1"></p>
<p><img src="http://ww4.sinaimg.cn/large/0063lLoQgw1ex1yoe8cmbj30wb0qrwjn.jpg?300*22" alt="图2" title="图2"></p>
<p>字体对面图中的文字，有区别的而且感觉第一的文字和图二真是差太多感觉非常不好。</p>
<p>有2中方法可以解决这个问题。<br>第一种：<br>找到安装目录hexo的E:\hexo\themes\next\source\css_variables\base.styl<br>修改第56行，改为</p>
<pre><code><span class="variable">$font-family-chinese</span>      = <span class="string">"Microsoft YaHei"</span> , <span class="string">"Microsoft Jhenghei"</span>, <span class="string">"Hiragino Sans GB"</span>
</code></pre><p>然后<font color="red">hexo clean</font>,hexo d--g 就好了。<br>第二种：<br>按照文档的<a href="http://theme-next.iissnan.com/faqs.html#自定义字体" target="_blank" rel="external">http://theme-next.iissnan.com/faqs.html#自定义字体</a>设置自己喜欢的字体，然后<font color="red">hexo clean</font>,hexo d--g 就好了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>hexo字体问题困扰了我好久了，我按照官方文档<a href="http://theme-next.iissnan.com/faqs.html#自定义字体">http://theme-next.iissnan.com/faqs.html#自定义字体</a>设置了也没用，然后也自己折腾了半天就是没有效果，原来是需要<font color='red'>hexo clean</font>一下然后重新提交部署到git才生效,很多实用next主题的也有这个问题.<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://blog.chen777.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[富文本编辑器]]></title>
    <link href="http://blog.chen777.com/2015/10/14/%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://blog.chen777.com/2015/10/14/富文本编辑器/</id>
    <published>2015-10-14T03:12:33.000Z</published>
    <updated>2015-10-14T08:17:44.470Z</updated>
    <content type="html"><![CDATA[<p>今天学弟需要用到富文本编辑器@喜子，写一下基本用法做备份，我使用的是xheditor官方地址：<a href="http://xheditor.com/" target="_blank" rel="external">http://xheditor.com/</a></p>
<blockquote>
<p>在线HTML编辑器就是在线编辑HTML代码的工具，它经常被应用于留言板留言、论坛发贴、Blog编写日志或等需要用户输入HTML的地方，是Web应用的常用模块之一。在线HTML编辑器可以实现对编辑内容添加各种丰富多彩的文字效果，以及提供各种方便快捷的操作功能，最大的提高编辑工作效率。在线HTML编辑器是任何网站不可或缺的重要功能组件，是互联网用户得心应手的驰骋网络的有力工具。<br><a id="more"></a></p>
</blockquote>
<p>废话不多说直接贴代码：</p>
<pre><code><span class="doctype">&lt;!DOCTYPE html&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
    <span class="tag">&lt;<span class="title">head</span>&gt;</span>
        <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">title</span>&gt;</span>xheditor<span class="tag">&lt;/<span class="title">title</span>&gt;</span>

        <span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
        <span class="class">.videoClassName</span> <span class="rules">{
            <span class="rule"><span class="attribute">background</span>:<span class="value"> transparent <span class="function">url</span>(img/video_icon_1.png) no-repeat
                <span class="number">20px</span> <span class="number">20px</span></span></span>;
            <span class="rule"><span class="attribute">background-position</span>:<span class="value"> <span class="number">3px</span> <span class="number">3px</span></span></span>;
        }</span>
        </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"js/jquery-1.7.2.min.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"js/xheditor/xheditor-1.1.14-zh-cn.min.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"js/test.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body</span>&gt;</span>
        <span class="tag">&lt;<span class="title">textarea</span>  <span class="attribute">id</span>=<span class="value">"elm2"</span> <span class="attribute">style</span>=<span class="value">"width: 900px; height: 300px;"</span> <span class="attribute">rows</span>=<span class="value">"100"</span> <span class="attribute">cols</span>=<span class="value">"50"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span> <span class="comment">&lt;!-- 富文本编辑器如果需要一键格式化功能，则要加入此div --&gt;</span>
        <span class="tag">&lt;<span class="title">br</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">id</span>=<span class="value">"submitForm"</span> <span class="attribute">value</span>=<span class="value">"提交"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre><p>test.js:</p>
<pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
<span class="keyword">var</span> plugins = {
        video:{c:<span class="string">'videoClassName'</span>,t:<span class="string">'录入视频(Ctrl+7)'</span>,s:<span class="string">'ctrl+7'</span>,i:<span class="function"><span class="keyword">function</span>(<span class="params">editor</span>)</span>{
            <span class="comment">//editor.setSource('test');</span>
        },e:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
            initVideoWin();
        }}            
}
<span class="keyword">var</span> editor=$(<span class="string">'#elm2'</span>).xheditor({
    tools:<span class="string">'Blocktag,Fontface,FontSize,Bold,Italic,Underline,Strikethrough,FontColor,BackColor,|,SelectAll,Removeformat,|,Align,|,List,Outdent,Indent,|,Link,Unlink,|,Img,|,Table,Source,Fullscreen,test1,Code,Hr,video'</span>,
    skin:<span class="string">'vista'</span>,
    upBtnText:<span class="string">' 上传 '</span>,
    html5Upload:<span class="literal">false</span>,
    upMultiple:<span class="string">'1'</span>,
    upLinkUrl:<span class="string">'admin/info/upload.action?_charset_=utf-8'</span>,
    upLinkExt:<span class="string">'jpeg,jpg,png,gif'</span>,
    **upImgUrl:<span class="string">'admin/info/upload.action'</span>,**
    upImgExt:<span class="string">'jpeg,jpg,png,gif'</span>,
    cleanPaste:<span class="number">2</span>,
    forcePtag:<span class="literal">true</span>,
    Pastetext:<span class="literal">true</span>,
    formatXHTML:<span class="literal">true</span>,
    plugins:plugins
    }); 
})

$(<span class="string">'#submitForm'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> sHtml=editor.getSource();
    <span class="keyword">var</span> test=editor.formatXHTML(sHtml);
});
</code></pre><p>mysql数据库使用的是text类型，插件上传图片upImgUrl这个是你controller里面写的上传方法。</p>
<p>压缩包：<a href="http://pan.baidu.com/s/1kTF6PW7" target="_blank" rel="external">http://pan.baidu.com/s/1kTF6PW7</a>  /mk5a</p>
<p>分享过期之后你可以联系我索取。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天学弟需要用到富文本编辑器@喜子，写一下基本用法做备份，我使用的是xheditor官方地址：<a href="http://xheditor.com/">http://xheditor.com/</a></p>
<blockquote>
<p>在线HTML编辑器就是在线编辑HTML代码的工具，它经常被应用于留言板留言、论坛发贴、Blog编写日志或等需要用户输入HTML的地方，是Web应用的常用模块之一。在线HTML编辑器可以实现对编辑内容添加各种丰富多彩的文字效果，以及提供各种方便快捷的操作功能，最大的提高编辑工作效率。在线HTML编辑器是任何网站不可或缺的重要功能组件，是互联网用户得心应手的驰骋网络的有力工具。<br>]]>
    
    </summary>
    
      <category term="xheditor" scheme="http://blog.chen777.com/tags/xheditor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java与C#AES加密解密]]></title>
    <link href="http://blog.chen777.com/2015/10/13/Java%E4%B8%8EC-AES%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    <id>http://blog.chen777.com/2015/10/13/Java与C-AES加密解密/</id>
    <published>2015-10-13T02:54:08.000Z</published>
    <updated>2015-10-14T08:20:54.008Z</updated>
    <content type="html"><![CDATA[<p>Java与C#AES加密解密，曾经做过特此留下来备份.<br><a id="more"></a></p>
<p><em>C#</em></p>
<pre><code><span class="preprocessor">#<span class="keyword">region</span> AES加解密  </span>
   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>  </span>
   <span class="comment"><span class="xmlDocTag">///</span>AES加密（加密步骤）  </span>
   <span class="comment"><span class="xmlDocTag">///</span>1，加密字符串得到2进制数组；  </span>
   <span class="comment"><span class="xmlDocTag">///</span>2，将2禁止数组转为16进制；  </span>
   <span class="comment"><span class="xmlDocTag">///</span>3，进行base64编码  </span>
   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span>  </span>
   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="toEncrypt"&gt;</span>要加密的字符串<span class="xmlDocTag">&lt;/param&gt;</span>  </span>
   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="key"&gt;</span>密钥<span class="xmlDocTag">&lt;/param&gt;</span>  </span>
   <span class="function"><span class="keyword">public</span> String <span class="title">Encrypt</span>(<span class="params">String toEncrypt, String key</span>)   
   </span>{  
       Byte[] _Key = Encoding.ASCII.GetBytes(key);  
       Byte[] _Source = Encoding.UTF8.GetBytes(toEncrypt);  

       Aes aes = Aes.Create(<span class="string">"AES"</span>);  
       aes.Mode = CipherMode.ECB;  
       aes.Padding = PaddingMode.PKCS7;  
       aes.Key = _Key;  
       ICryptoTransform cTransform = aes.CreateEncryptor();  
       Byte[] cryptData = cTransform.TransformFinalBlock(_Source, <span class="number">0</span>, _Source.Length);  
       String HexCryptString = Hex_2To16(cryptData);  
       Byte[] HexCryptData = Encoding.UTF8.GetBytes(HexCryptString);  
       String CryptString =Convert.ToBase64String(HexCryptData);  
       <span class="keyword">return</span> CryptString;  
   }  

   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>  </span>
   <span class="comment"><span class="xmlDocTag">///</span> AES解密（解密步骤）  </span>
   <span class="comment"><span class="xmlDocTag">///</span> 1，将BASE64字符串转为16进制数组  </span>
   <span class="comment"><span class="xmlDocTag">///</span> 2，将16进制数组转为字符串  </span>
   <span class="comment"><span class="xmlDocTag">///</span> 3，将字符串转为2进制数据  </span>
   <span class="comment"><span class="xmlDocTag">///</span> 4，用AES解密数据  </span>
   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span>  </span>
   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="encryptedSource"&gt;</span>已加密的内容<span class="xmlDocTag">&lt;/param&gt;</span>  </span>
   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="key"&gt;</span>密钥<span class="xmlDocTag">&lt;/param&gt;</span>  </span>
   <span class="function"><span class="keyword">public</span> String <span class="title">Decrypt</span>(<span class="params"><span class="keyword">string</span> encryptedSource, <span class="keyword">string</span> key</span>)  
   </span>{  
       Byte[] _Key = Encoding.ASCII.GetBytes(key);  
       Aes aes = Aes.Create(<span class="string">"AES"</span>);  
       aes.Mode = CipherMode.ECB;  
       aes.Padding = PaddingMode.PKCS7;  
       aes.Key = _Key;  
       ICryptoTransform cTransform = aes.CreateDecryptor();  

       Byte[] encryptedData = Convert.FromBase64String(encryptedSource);  
       String encryptedString = Encoding.UTF8.GetString(encryptedData);  
       Byte[] _Source = Hex_16To2(encryptedString);  
       Byte[] originalSrouceData = cTransform.TransformFinalBlock(_Source, <span class="number">0</span>, _Source.Length);  
       String originalString = Encoding.UTF8.GetString(originalSrouceData);  
       <span class="keyword">return</span> originalString;  
   }  

   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>  </span>
   <span class="comment"><span class="xmlDocTag">///</span> 2进制转16进制  </span>
   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span>  </span>
   <span class="function">String <span class="title">Hex_2To16</span>(<span class="params">Byte[] bytes</span>)  
   </span>{  
       String hexString = String.Empty;  
       Int32 iLength = <span class="number">65535</span>;  
       <span class="keyword">if</span> (bytes != <span class="keyword">null</span>)  
       {  
           StringBuilder strB = <span class="keyword">new</span> StringBuilder();  

           <span class="keyword">if</span> (bytes.Length &lt; iLength)  
           {  
               iLength = bytes.Length;  
           }  

           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iLength; i++)  
           {  
               strB.Append(bytes[i].ToString(<span class="string">"X2"</span>));  
           }  
           hexString = strB.ToString();  
       }  
       <span class="keyword">return</span> hexString;  
   }  

   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span>  </span>
   <span class="comment"><span class="xmlDocTag">///</span> 16进制转2进制  </span>
   <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span>  </span>
   Byte[] Hex_16To2(String hexString)  
   {  
       <span class="keyword">if</span> ((hexString.Length % <span class="number">2</span>) != <span class="number">0</span>)  
       {  
           hexString += <span class="string">" "</span>;  
       }  
       Byte[] returnBytes = <span class="keyword">new</span> Byte[hexString.Length / <span class="number">2</span>];  
       <span class="keyword">for</span> (Int32 i = <span class="number">0</span>; i &lt; returnBytes.Length; i++)  
       {  
           returnBytes[i] = Convert.ToByte(hexString.Substring(i * <span class="number">2</span>, <span class="number">2</span>), <span class="number">16</span>);  
       }  
       <span class="keyword">return</span> returnBytes;  
   }  
   <span class="preprocessor">#<span class="keyword">endregion</span>  </span>
</code></pre><p><em>java</em></p>
<pre><code><span class="keyword">package</span> com.palic.pss.afcs.worldthrough.common.util;

<span class="keyword">import</span> javax.crypto.Cipher;
<span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;

<span class="keyword">import</span> repack.com.thoughtworks.xstream.core.util.Base64Encoder;
<span class="comment">/**
 * AES加密解密
 * @author
 *
 */</span>
<span class="keyword">public</span> class AesUtils {
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> cKey= <span class="string">"assistant7654321"</span>;
      <span class="comment">/** 
     * 加密--把加密后的byte数组先进行二进制转16进制在进行base64编码 
     * @param sSrc 
     * @param sKey 
     * @return 
     * @throws Exception 
     */</span>  
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> encrypt(<span class="keyword">String</span> sSrc, <span class="keyword">String</span> sKey) <span class="keyword">throws</span> Exception {  
        <span class="keyword">if</span> (sKey == <span class="keyword">null</span>) {  
            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Argument sKey is null."</span>);  
        }  
        <span class="keyword">if</span> (sKey.length() != <span class="number">16</span>) {  
            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(  
                    <span class="string">"Argument sKey'length is not 16."</span>);  
        }  
        <span class="built_in">byte</span>[] raw = sKey.getBytes(<span class="string">"ASCII"</span>);  
        SecretKeySpec skeySpec = <span class="keyword">new</span> SecretKeySpec(raw, <span class="string">"AES"</span>);  

        Cipher cipher = Cipher.getInstance(<span class="string">"AES"</span>);  
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);  

        <span class="built_in">byte</span>[] encrypted = cipher.doFinal(sSrc.getBytes(<span class="string">"UTF-8"</span>));  
        <span class="keyword">String</span> tempStr = parseByte2HexStr(encrypted);  

        Base64Encoder encoder = <span class="keyword">new</span> Base64Encoder();  
        <span class="keyword">return</span> encoder.encode(tempStr.getBytes(<span class="string">"UTF-8"</span>));  
    }  

    <span class="comment">/** 
     *解密--先 进行base64解码，在进行16进制转为2进制然后再解码 
     * @param sSrc 
     * @param sKey 
     * @return 
     * @throws Exception 
     */</span>  
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> decrypt(<span class="keyword">String</span> sSrc, <span class="keyword">String</span> sKey) <span class="keyword">throws</span> Exception {  

        <span class="keyword">if</span> (sKey == <span class="keyword">null</span>) {  
            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"499"</span>);  
        }  
        <span class="keyword">if</span> (sKey.length() != <span class="number">16</span>) {  
            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"498"</span>);  
        }  

        <span class="built_in">byte</span>[] raw = sKey.getBytes(<span class="string">"ASCII"</span>);  
        SecretKeySpec skeySpec = <span class="keyword">new</span> SecretKeySpec(raw, <span class="string">"AES"</span>);  

        Cipher cipher = Cipher.getInstance(<span class="string">"AES"</span>);  
        cipher.init(Cipher.DECRYPT_MODE, skeySpec);  

        Base64Encoder encoder = <span class="keyword">new</span> Base64Encoder();  
        <span class="built_in">byte</span>[] encrypted1 = encoder.decode(sSrc);  

        <span class="keyword">String</span> tempStr = <span class="keyword">new</span> <span class="keyword">String</span>(encrypted1, <span class="string">"utf-8"</span>);  
        encrypted1 = parseHexStr2Byte(tempStr);  
        <span class="built_in">byte</span>[] original = cipher.doFinal(encrypted1);  
        <span class="keyword">String</span> originalString = <span class="keyword">new</span> <span class="keyword">String</span>(original, <span class="string">"utf-8"</span>);  
        <span class="keyword">return</span> originalString;  
    }  

    <span class="comment">/** 
     * 将二进制转换成16进制 
     *  
     * @param buf 
     * @return 
     */</span>  
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> parseByte2HexStr(<span class="built_in">byte</span> buf[]) {  
        StringBuffer sb = <span class="keyword">new</span> StringBuffer();  
        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; buf.length; i++) {  
            <span class="keyword">String</span> <span class="built_in">hex</span> = Integer.toHexString(buf[i] &amp; <span class="number">0xFF</span>);  
            <span class="keyword">if</span> (<span class="built_in">hex</span>.length() == <span class="number">1</span>) {  
                <span class="built_in">hex</span> = <span class="string">'0'</span> + <span class="built_in">hex</span>;  
            }  
            sb.<span class="built_in">append</span>(<span class="built_in">hex</span>.toUpperCase());  
        }  
        <span class="keyword">return</span> sb.toString();  
    }  

    <span class="comment">/** 
     * 将16进制转换为二进制 
     *  
     * @param hexStr 
     * @return 
     */</span>  
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] parseHexStr2Byte(<span class="keyword">String</span> hexStr) {  
        <span class="keyword">if</span> (hexStr.length() &lt; <span class="number">1</span>)  
            <span class="keyword">return</span> <span class="keyword">null</span>;  
        <span class="built_in">byte</span>[] result = <span class="keyword">new</span> <span class="built_in">byte</span>[hexStr.length() / <span class="number">2</span>];  
        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; hexStr.length() / <span class="number">2</span>; i++) {  
            <span class="built_in">int</span> high = Integer.parseInt(hexStr.substring(i * <span class="number">2</span>, i * <span class="number">2</span> + <span class="number">1</span>), <span class="number">16</span>);  
            <span class="built_in">int</span> low = Integer.parseInt(hexStr.substring(i * <span class="number">2</span> + <span class="number">1</span>, i * <span class="number">2</span> + <span class="number">2</span>),  
                    <span class="number">16</span>);  
            result[i] = (<span class="built_in">byte</span>) (high * <span class="number">16</span> + low);  
        }  
        <span class="keyword">return</span> result;  
    } 
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> Exception {
        <span class="comment">/*
         * 加密用的Key 可以用26个字母和数字组成，最好不要用保留字符，虽然不会错，至于怎么裁决，个人看情况而定
         */</span>
        <span class="keyword">String</span> cKey = <span class="string">"assistant7654321"</span>;
        <span class="comment">// 需要加密的字串</span>
        <span class="keyword">String</span> cSrc = <span class="string">"123456"</span>;
        <span class="comment">// 加密</span>
        <span class="keyword">long</span> lStart = System.currentTimeMillis();
        <span class="keyword">String</span> enString = encrypt(cSrc, cKey);
        System.out.<span class="built_in">println</span>(<span class="string">"加密后的字串是："</span> + enString);
        <span class="keyword">long</span> lUseTime = System.currentTimeMillis() - lStart;
        System.out.<span class="built_in">println</span>(<span class="string">"加密耗时："</span> + lUseTime + <span class="string">"毫秒"</span>);
        <span class="comment">// 解密</span>
        lStart = System.currentTimeMillis();
        <span class="keyword">String</span> DeString = decrypt(enString, cKey);
        System.out.<span class="built_in">println</span>(<span class="string">"解密后的字串是："</span> + DeString);
        lUseTime = System.currentTimeMillis() - lStart;
        System.out.<span class="built_in">println</span>(<span class="string">"解密耗时："</span> + lUseTime + <span class="string">"毫秒"</span>);
    }
}
</code></pre><p>附上百度云盘链接地址：链接：<a href="http://pan.baidu.com/s/1pJout5L" target="_blank" rel="external">http://pan.baidu.com/s/1pJout5L</a> （密码：y4bd）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java与C#AES加密解密，曾经做过特此留下来备份.<br>]]>
    
    </summary>
    
      <category term="AES" scheme="http://blog.chen777.com/tags/AES/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开发工具]]></title>
    <link href="http://blog.chen777.com/2015/10/12/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    <id>http://blog.chen777.com/2015/10/12/开发工具/</id>
    <published>2015-10-12T06:57:43.000Z</published>
    <updated>2015-10-15T07:18:44.966Z</updated>
    <content type="html"><![CDATA[<p>工欲善其事必先利其器，每个coder的都有自己偏执的工具， 我介绍一下我使用的工具(eclipse,notepad++,secureCRT,navicat,HBuild),一般都是解压即可用，压缩包里面会有使用介绍。</p>
<a id="more"></a>
<p>eclipse：<a href="http://www.eclipse.org/downloads/" target="_blank" rel="external">http://www.eclipse.org/downloads/</a></p>
<p>我使用的eclipse：<a href="http://pan.baidu.com/s/1C1yKA" target="_blank" rel="external">http://pan.baidu.com/s/1C1yKA</a>  /nsvj</p>
<p>chrome:<a href="http://chromecj.com/chrome/2014-09/177/download.html" target="_blank" rel="external">http://chromecj.com/chrome/2014-09/177/download.html</a></p>
<p>文本编辑器用的notepad++，世面上有很多文本编辑器editplus，uedit等。<br>notepad++:<a href="http://pan.baidu.com/s/1dDhTgwp" target="_blank" rel="external">http://pan.baidu.com/s/1dDhTgwp</a>  /d350</p>
<p>反编译工具：<a href="http://pan.baidu.com/s/1pJH09gZ" target="_blank" rel="external">http://pan.baidu.com/s/1pJH09gZ</a>  /640h</p>
<p>SecureCRT:<a href="http://pan.baidu.com/s/1kTJAAxh" target="_blank" rel="external">http://pan.baidu.com/s/1kTJAAxh</a>  /ddog</p>
<p>navicat for mysql:<a href="http://pan.baidu.com/s/15FO8Q" target="_blank" rel="external">http://pan.baidu.com/s/15FO8Q</a>   /fpw2</p>
<p>偶尔兼职做一下页面的开发或者调试一下JS，网页工具有runjs，我下了一个HBuilder，支持原创.<br>HBuilder:<a href="http://www.dcloud.io/" target="_blank" rel="external">http://www.dcloud.io/</a></p>
<p>听歌以前用的酷狗，用久了感觉没新意了(其实就是听到了好歌没有地方抒发情感)，换了一个网易云音乐.</p>
<p>文本比较工具：Beyond Compare11，解压即可。<a href="http://pan.baidu.com/s/1eQ4RCrg" target="_blank" rel="external">http://pan.baidu.com/s/1eQ4RCrg</a>  /es9x</p>
<p>基本开发工具就是这些了。</p>
<p>so 附上我喜欢的music:<a href="http://music.163.com/#/m/playlist?id=111665824" target="_blank" rel="external">http://music.163.com/#/m/playlist?id=111665824</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>工欲善其事必先利其器，每个coder的都有自己偏执的工具， 我介绍一下我使用的工具(eclipse,notepad++,secureCRT,navicat,HBuild),一般都是解压即可用，压缩包里面会有使用介绍。</p>]]>
    
    </summary>
    
      <category term="工具" scheme="http://blog.chen777.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[程序员必备之机械键盘]]></title>
    <link href="http://blog.chen777.com/2015/10/10/jianpan/"/>
    <id>http://blog.chen777.com/2015/10/10/jianpan/</id>
    <published>2015-10-10T03:13:31.000Z</published>
    <updated>2015-10-10T03:24:12.224Z</updated>
    <content type="html"><![CDATA[<p>最近入手了一款青轴机械键盘，虽然价格有点贵（相比于普通的键盘），但是还是很爽的哈。噼里啪啦的手感以及好看的外观，干活都持久了。<br>我买的是达尔优的青轴，有人说青轴吵，买茶轴或红轴，我个人推荐青轴。<br>我是手残档，图片拍的不好 凑合看。<br><a id="more"></a><br><img src="http://ww2.sinaimg.cn/large/0063lLoQgw1ewvvh38ayjj31kw16ok8b.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/0063lLoQgw1ewvvhsubjnj31kw16o18n.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1ewvvi0ixetj31kw16oh4t.jpg" alt=""></p>
<p>链接：<a href="http://item.jd.com/1365181.html" target="_blank" rel="external">http://item.jd.com/1365181.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近入手了一款青轴机械键盘，虽然价格有点贵（相比于普通的键盘），但是还是很爽的哈。噼里啪啦的手感以及好看的外观，干活都持久了。<br>我买的是达尔优的青轴，有人说青轴吵，买茶轴或红轴，我个人推荐青轴。<br>我是手残档，图片拍的不好 凑合看。<br>]]>
    
    </summary>
    
      <category term="机械键盘" scheme="http://blog.chen777.com/tags/%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ajaxfileupload图片上传]]></title>
    <link href="http://blog.chen777.com/2015/09/28/ajaxfileupload%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    <id>http://blog.chen777.com/2015/09/28/ajaxfileupload图片上传/</id>
    <published>2015-09-28T02:00:32.000Z</published>
    <updated>2015-10-21T03:29:36.695Z</updated>
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/0063lLoQgw1ewhxyxv3rjj30vb0mrgoi.jpg" alt=""></p>
<p><strong>封面图</strong></p>
<p>我这里使用的是ajaxfileupload控件做的上传，引用的CSS JS如图<img src="http://ww1.sinaimg.cn/large/0063lLoQgw1ewhz3u3ppqj30sy09yjze.jpg" alt=""><br>下载地址：<a href="http://url.cn/SP3S7c" target="_blank" rel="external">http://url.cn/SP3S7c</a><br>没有的去网上对应找就可以的，topic-update.js是业务的JS其他的全是插件,各位看官酌情添加。<br>JSP页面：</p>
<pre><code><span class="tag">&lt;<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;<span class="title">th</span> <span class="attribute">width</span>=<span class="value">"120px"</span> <span class="attribute">align</span>=<span class="value">"right"</span> <span class="attribute">nowrap</span>=<span class="value">"nowrap"</span>&gt;</span>封面图：<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span> <span class="attribute">colspan</span>=<span class="value">"5"</span> <span class="attribute">nowrap</span>=<span class="value">"nowrap"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">id</span>=<span class="value">"imgUploadBtn"</span> <span class="attribute">style</span>=<span class="value">"width: 180px;"</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"btnUpLoadImg"</span> <span class="attribute">href</span>=<span class="value">"javaScript:void(0);"</span> <span class="attribute">class</span>=<span class="value">"easyui-linkbutton"</span> <span class="attribute">style</span>=<span class="value">"width: 50px; height: 22px"</span>&gt;</span>上传<span class="tag">&lt;/<span class="title">a</span>&gt;</span>(宽&gt;=540）
            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"showImgDiv"</span> <span class="attribute">align</span>=<span class="value">"left"</span>&gt;</span>
                                <span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"imgUrl"</span> <span class="attribute">onload</span>=<span class="value">"JsUtils.autoResizeImage(300,100,this)"</span> /&gt;</span>
                            <span class="tag">&lt;/<span class="title">div</span>&gt;</span> <span class="tag">&lt;<span class="title">s:textfield</span> <span class="attribute">id</span>=<span class="value">"imgUrlIn"</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> /&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
</code></pre><p>topic-upadte.js:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">uploadImg</span>(<span class="params"></span>)</span>{
     $.ajaxFileUpload( {
            url : <span class="string">'admin/info/upload.action'</span>, <span class="comment">//需要链接到服务器地址</span>
            secureuri : <span class="literal">false</span>,
            fileElementId : <span class="string">'imgUploadBtn'</span>, <span class="comment">//文件选择框的id属性 name</span>
            width:<span class="number">540</span>,
            height:<span class="number">0</span>,
            dataType : <span class="string">'text'</span>, 
            success : <span class="function"><span class="keyword">function</span>(<span class="params">data, status</span>)</span>{
                <span class="keyword">var</span> jsonData = strToJson(data);
                <span class="keyword">if</span>(jsonData.err)
                {
                    $.messager.alert(<span class="string">'温馨提示'</span>,jsonData.err,<span class="string">'warning'</span>);
                }
                <span class="keyword">else</span>
                {
                    <span class="keyword">var</span> url = jsonData.msg.url;
                    $(<span class="string">"#imgUrl"</span>).attr(<span class="string">"src"</span>,url);
                    imgUrl = url;
                    $(<span class="string">"#imgUrlIn"</span>).val(url);
                }
        }
    });
}
</code></pre><p>action：<em>filedata,filedataFileName,fileWidth,fileHeight getter/setter省略</em></p>
<pre><code>/**
 * 图片上传
 */
public void uploadImg(){
    topicSerivice.upload(filedata,filedataFileName,fileWidth,fileHeight)<span class="comment">;</span>
}

    public <span class="built_in">String</span> upload(File filedata, <span class="built_in">String</span> fileName, <span class="built_in">int</span> fileWidth,
        <span class="built_in">int</span> fileHeight) {
    ServletActionContext.getResponse().setContentType(<span class="string">"text/html; charset=utf-8"</span>)<span class="comment">;</span>
    <span class="built_in">String</span> json= <span class="string">""</span><span class="comment">;</span>
      <span class="built_in">String</span> path1=<span class="string">""</span><span class="comment">;</span>
      <span class="keyword">if</span>(filedata!=<span class="literal">null</span>){

        // 获取缩略图保存的文件夹
        <span class="built_in">String</span> filePath = PropertyUtils.getProperty(<span class="string">"temp"</span>)<span class="comment">;</span>
            // 获取网站基础路径
        <span class="built_in">String</span> baseurl = PropertyUtils.getProperty(<span class="string">"baseurl"</span>)<span class="comment">;</span>

        // 获取到文件的绝对路径
        <span class="built_in">String</span> fd = DateUtil.formatDate(new Date(), <span class="string">"yyyyMMdd"</span>)<span class="comment">;</span>
        <span class="built_in">String</span> uploadPath =  filePath + fd<span class="comment">;</span>
        <span class="built_in">String</span> newFileName = System.nanoTime()
                + UploadFileUtil.getFileName(fileName)<span class="comment">;</span>
        path1 = UploadFileUtil.uploadFileInfo(filedata,uploadPath+<span class="string">"/"</span>, newFileName.toLowerCase())<span class="comment">;</span>
        <span class="built_in">String</span> path = ServletActionContext.getServletContext().getContextPath()<span class="comment">;</span>
        path1 = baseurl + path + path1<span class="comment">;            </span>
      }
     /* <span class="built_in">String</span> tempWH=path1.substring(path1.indexOf(<span class="string">"?"</span>)+<span class="number">1</span>)<span class="comment">;</span>
        <span class="keyword">if</span>(tempWH.indexOf(<span class="string">"*"</span>)&gt;<span class="number">0</span>){
            <span class="built_in">String</span> _width=tempWH.substring(<span class="number">0</span>,tempWH.indexOf(<span class="string">"*"</span>))<span class="comment">;</span>
            <span class="built_in">String</span> _height=tempWH.substring(tempWH.indexOf(<span class="string">"*"</span>)+<span class="number">1</span>)<span class="comment">;</span>
            <span class="keyword">if</span>(_width.matches(<span class="string">"\\d+"</span>) &amp;&amp; _height.matches(<span class="string">"\\d+"</span>))
            {
                <span class="keyword">if</span>(Integer.parseInt(_width) &lt;= width) 
                {
                    json=<span class="string">"{\"</span>err\<span class="string">":\"</span>宽度需要大于:<span class="string">"+width+"</span>\<span class="string">",\"</span>msg\<span class="string">":{\"</span>url\<span class="string">":\""+path1+"</span>\<span class="string">"}}"</span><span class="comment">;</span>
                }
                <span class="keyword">else</span> <span class="keyword">if</span>(Integer.parseInt(_height) &lt;= height)
                {
                    json=<span class="string">"{\"</span>err\<span class="string">":\"</span>长度需要大于:<span class="string">"+height+"</span>\<span class="string">",\"</span>msg\<span class="string">":{\"</span>url\<span class="string">":\""+path1+"</span>\<span class="string">"}}"</span><span class="comment">;</span>
                }
                <span class="keyword">else</span>
                {
                    json=<span class="string">"{\"</span>err\<span class="string">":\"</span>\<span class="string">",\"</span>msg\<span class="string">":{\"</span>url\<span class="string">":\""+path1+"</span>\<span class="string">"}}"</span><span class="comment">; </span>
                }
            }
        }*/
      json=<span class="string">"{\"</span>err\<span class="string">":\"</span>\<span class="string">",\"</span>msg\<span class="string">":{\"</span>url\<span class="string">":\""+path1+"</span>\<span class="string">"}}"</span><span class="comment">; </span>
        try {
            ServletActionContext.getResponse().getWriter().write(json)<span class="comment">;</span>
        } catch (IOException e) {
            e.printStackTrace()<span class="comment">;</span>
        }
      <span class="keyword">return</span> <span class="literal">null</span><span class="comment">;</span>
}
</code></pre><p>顺便提一句：<a href="http://fex.baidu.com/webuploader/getting-started.html" target="_blank" rel="external">http://fex.baidu.com/webuploader/getting-started.html</a>这个上传插件也不错。大家各取所需。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://ww1.sinaimg.cn/large/0063lLoQgw1ewhxyxv3rjj30vb0mrgoi.jpg" alt=""></p>
<p><strong>封面图</strong></p>
<p>我这里使用的是ajaxfileupl]]>
    </summary>
    
      <category term="ajaxfileupload" scheme="http://blog.chen777.com/tags/ajaxfileupload/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java List remove,contains底层]]></title>
    <link href="http://blog.chen777.com/2015/09/24/java-revmoveAll/"/>
    <id>http://blog.chen777.com/2015/09/24/java-revmoveAll/</id>
    <published>2015-09-24T09:35:29.000Z</published>
    <updated>2015-09-28T08:39:56.276Z</updated>
    <content type="html"><![CDATA[<p>java list remove(Object) removeAll(Collection&lt;?&gt; collection)先看看API介绍<br><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1ewef5213sgj31610azadb.jpg" alt=""></p>
<p>需要实现其equals，才能remove(Object)，引用下面这篇文章：<br><a href="http://blog.csdn.net/will_awoke/article/details/6528872" target="_blank" rel="external">http://blog.csdn.net/will_awoke/article/details/6528872</a></p>
<p>By the way,contains(Object)也是需要实现其equals方法，源码：</p>
<pre><code><span class="keyword">public</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> obj)
{
    <span class="keyword">return</span> indexOf(obj) &gt;= <span class="number">0</span>;
}

<span class="keyword">public</span> <span class="built_in">int</span> indexOf(<span class="keyword">Object</span> obj)
{
    <span class="keyword">if</span>(obj == <span class="keyword">null</span>)
    {
        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)
            <span class="keyword">if</span>(elementData[i] == <span class="keyword">null</span>)
                <span class="keyword">return</span> i;

    } <span class="keyword">else</span>
    {
        <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">size</span>; j++)
            <span class="keyword">if</span>(obj.equals(elementData[j]))
                <span class="keyword">return</span> j;

    }
    <span class="keyword">return</span> -<span class="number">1</span>;
} 
</code></pre><p>多用反编译查看原理，才能了解其底层 以便更好的优化和操作List.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>java list remove(Object) removeAll(Collection&lt;?&gt; collection)先看看API介绍<br><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1ewef5213sg]]>
    </summary>
    
      <category term="List" scheme="http://blog.chen777.com/tags/List/"/>
    
      <category term="java" scheme="http://blog.chen777.com/tags/java/"/>
    
  </entry>
  
</feed>
