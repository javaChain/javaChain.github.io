<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[陈西西]]></title>
  <subtitle><![CDATA[通往架构师的路上]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.chen777.com/"/>
  <updated>2015-09-28T04:24:59.624Z</updated>
  <id>http://blog.chen777.com/</id>
  
  <author>
    <name><![CDATA[Xixi Chain]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[easyui做后台]]></title>
    <link href="http://blog.chen777.com/2015/09/28/easyui/"/>
    <id>http://blog.chen777.com/2015/09/28/easyui/</id>
    <published>2015-09-28T02:00:32.000Z</published>
    <updated>2015-09-28T04:24:59.624Z</updated>
    <content type="html"><![CDATA[<p>首先看页面构造<br><img src="http://ww1.sinaimg.cn/large/0063lLoQgw1ewhxyxv3rjj30vb0mrgoi.jpg" alt="">还是比较复杂的页面构成，图片上传预览压缩，多选combobox,tree，以及xheditor。<br>页面比较传统的 我就不做介绍，讲封面图、推送机型、推送渠道、地域标签、发布时间、详情内容。</p>
<p><strong>封面图</strong></p>
<p>我这里使用的是ajaxfileupload控件做的上传，引用的CSS JS如图<img src="http://ww1.sinaimg.cn/large/0063lLoQgw1ewhz3u3ppqj30sy09yjze.jpg" alt=""><br>下载地址：<a href="http://url.cn/SP3S7c" target="_blank" rel="external">http://url.cn/SP3S7c</a><br>没有的去网上对应找就可以的，topic-update.js是业务的JS其他的全是插件,各位看官酌情添加。<br>JSP页面：</p>
<pre><code><span class="tag">&lt;<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;<span class="title">th</span> <span class="attribute">width</span>=<span class="value">"120px"</span> <span class="attribute">align</span>=<span class="value">"right"</span> <span class="attribute">nowrap</span>=<span class="value">"nowrap"</span>&gt;</span>封面图：<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span> <span class="attribute">colspan</span>=<span class="value">"5"</span> <span class="attribute">nowrap</span>=<span class="value">"nowrap"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">id</span>=<span class="value">"imgUploadBtn"</span> <span class="attribute">style</span>=<span class="value">"width: 180px;"</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"btnUpLoadImg"</span> <span class="attribute">href</span>=<span class="value">"javaScript:void(0);"</span> <span class="attribute">class</span>=<span class="value">"easyui-linkbutton"</span> <span class="attribute">style</span>=<span class="value">"width: 50px; height: 22px"</span>&gt;</span>上传<span class="tag">&lt;/<span class="title">a</span>&gt;</span>(宽&gt;=540）
            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"showImgDiv"</span> <span class="attribute">align</span>=<span class="value">"left"</span>&gt;</span>
                                <span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"imgUrl"</span> <span class="attribute">onload</span>=<span class="value">"JsUtils.autoResizeImage(300,100,this)"</span> /&gt;</span>
                            <span class="tag">&lt;/<span class="title">div</span>&gt;</span> <span class="tag">&lt;<span class="title">s:textfield</span> <span class="attribute">id</span>=<span class="value">"imgUrlIn"</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> /&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
</code></pre><p>topic-upadte.js:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">uploadImg</span>(<span class="params"></span>)</span>{
     $.ajaxFileUpload( {
            url : <span class="string">'admin/info/upload.action'</span>, <span class="comment">//需要链接到服务器地址</span>
            secureuri : <span class="literal">false</span>,
            fileElementId : <span class="string">'imgUploadBtn'</span>, <span class="comment">//文件选择框的id属性 name</span>
            width:<span class="number">540</span>,
            height:<span class="number">0</span>,
            dataType : <span class="string">'text'</span>, 
            success : <span class="function"><span class="keyword">function</span>(<span class="params">data, status</span>)</span>{
                <span class="keyword">var</span> jsonData = strToJson(data);
                <span class="keyword">if</span>(jsonData.err)
                {
                    $.messager.alert(<span class="string">'温馨提示'</span>,jsonData.err,<span class="string">'warning'</span>);
                }
                <span class="keyword">else</span>
                {
                    <span class="keyword">var</span> url = jsonData.msg.url;
                    $(<span class="string">"#imgUrl"</span>).attr(<span class="string">"src"</span>,url);
                    imgUrl = url;
                    $(<span class="string">"#imgUrlIn"</span>).val(url);
                }
        }
    });
}
</code></pre><p>action：<em>filedata,filedataFileName,fileWidth,fileHeight getter/setter省略</em></p>
<pre><code>/**
 * 图片上传
 */
public void uploadImg(){
    topicSerivice.upload(filedata,filedataFileName,fileWidth,fileHeight)<span class="comment">;</span>
}

    public <span class="built_in">String</span> upload(File filedata, <span class="built_in">String</span> fileName, <span class="built_in">int</span> fileWidth,
        <span class="built_in">int</span> fileHeight) {
    ServletActionContext.getResponse().setContentType(<span class="string">"text/html; charset=utf-8"</span>)<span class="comment">;</span>
    <span class="built_in">String</span> json= <span class="string">""</span><span class="comment">;</span>
      <span class="built_in">String</span> path1=<span class="string">""</span><span class="comment">;</span>
      <span class="keyword">if</span>(filedata!=<span class="literal">null</span>){

        // 获取缩略图保存的文件夹
        <span class="built_in">String</span> filePath = PropertyUtils.getProperty(<span class="string">"temp"</span>)<span class="comment">;</span>
            // 获取网站基础路径
        <span class="built_in">String</span> baseurl = PropertyUtils.getProperty(<span class="string">"baseurl"</span>)<span class="comment">;</span>

        // 获取到文件的绝对路径
        <span class="built_in">String</span> fd = DateUtil.formatDate(new Date(), <span class="string">"yyyyMMdd"</span>)<span class="comment">;</span>
        <span class="built_in">String</span> uploadPath =  filePath + fd<span class="comment">;</span>
        <span class="built_in">String</span> newFileName = System.nanoTime()
                + UploadFileUtil.getFileName(fileName)<span class="comment">;</span>
        path1 = UploadFileUtil.uploadFileInfo(filedata,uploadPath+<span class="string">"/"</span>, newFileName.toLowerCase())<span class="comment">;</span>
        <span class="built_in">String</span> path = ServletActionContext.getServletContext().getContextPath()<span class="comment">;</span>
        path1 = baseurl + path + path1<span class="comment">;            </span>
      }
     /* <span class="built_in">String</span> tempWH=path1.substring(path1.indexOf(<span class="string">"?"</span>)+<span class="number">1</span>)<span class="comment">;</span>
        <span class="keyword">if</span>(tempWH.indexOf(<span class="string">"*"</span>)&gt;<span class="number">0</span>){
            <span class="built_in">String</span> _width=tempWH.substring(<span class="number">0</span>,tempWH.indexOf(<span class="string">"*"</span>))<span class="comment">;</span>
            <span class="built_in">String</span> _height=tempWH.substring(tempWH.indexOf(<span class="string">"*"</span>)+<span class="number">1</span>)<span class="comment">;</span>
            <span class="keyword">if</span>(_width.matches(<span class="string">"\\d+"</span>) &amp;&amp; _height.matches(<span class="string">"\\d+"</span>))
            {
                <span class="keyword">if</span>(Integer.parseInt(_width) &lt;= width) 
                {
                    json=<span class="string">"{\"</span>err\<span class="string">":\"</span>宽度需要大于:<span class="string">"+width+"</span>\<span class="string">",\"</span>msg\<span class="string">":{\"</span>url\<span class="string">":\""+path1+"</span>\<span class="string">"}}"</span><span class="comment">;</span>
                }
                <span class="keyword">else</span> <span class="keyword">if</span>(Integer.parseInt(_height) &lt;= height)
                {
                    json=<span class="string">"{\"</span>err\<span class="string">":\"</span>长度需要大于:<span class="string">"+height+"</span>\<span class="string">",\"</span>msg\<span class="string">":{\"</span>url\<span class="string">":\""+path1+"</span>\<span class="string">"}}"</span><span class="comment">;</span>
                }
                <span class="keyword">else</span>
                {
                    json=<span class="string">"{\"</span>err\<span class="string">":\"</span>\<span class="string">",\"</span>msg\<span class="string">":{\"</span>url\<span class="string">":\""+path1+"</span>\<span class="string">"}}"</span><span class="comment">; </span>
                }
            }
        }*/
      json=<span class="string">"{\"</span>err\<span class="string">":\"</span>\<span class="string">",\"</span>msg\<span class="string">":{\"</span>url\<span class="string">":\""+path1+"</span>\<span class="string">"}}"</span><span class="comment">; </span>
        try {
            ServletActionContext.getResponse().getWriter().write(json)<span class="comment">;</span>
        } catch (IOException e) {
            e.printStackTrace()<span class="comment">;</span>
        }
      <span class="keyword">return</span> <span class="literal">null</span><span class="comment">;</span>
}
</code></pre><p>顺便提一句：<a href="http://fex.baidu.com/webuploader/getting-started.html" target="_blank" rel="external">http://fex.baidu.com/webuploader/getting-started.html</a>这个上传插件也不错。大家各取所需。</p>
<p>如果你有什么不明白的地方可以留言或者+Q群：307153267</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>首先看页面构造<br><img src="http://ww1.sinaimg.cn/large/0063lLoQgw1ewhxyxv3rjj30vb0mrgoi.jpg" alt="">还是比较复杂的页面构成，图片上传预览压缩，多选combobox,tree，以及xhed]]>
    </summary>
    
      <category term="easyui" scheme="http://blog.chen777.com/tags/easyui/"/>
    
      <category term="图片上传" scheme="http://blog.chen777.com/tags/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java List remove,contains底层]]></title>
    <link href="http://blog.chen777.com/2015/09/24/java-revmoveAll/"/>
    <id>http://blog.chen777.com/2015/09/24/java-revmoveAll/</id>
    <published>2015-09-24T09:35:29.000Z</published>
    <updated>2015-09-25T01:17:43.081Z</updated>
    <content type="html"><![CDATA[<p>java list remove(Object) removeAll(Collection&lt;?&gt; collection)先看看API介绍<br><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1ewef5213sgj31610azadb.jpg" alt=""></p>
<p>需要实现其equals，才能remove(Object)，引用下面这篇文章：<br><a href="http://blog.csdn.net/will_awoke/article/details/6528872" target="_blank" rel="external">http://blog.csdn.net/will_awoke/article/details/6528872</a></p>
<p>By the way,contains(Object)也是需要实现其equals方法，源码：</p>
<pre><code><span class="keyword">public</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> obj)
{
    <span class="keyword">return</span> indexOf(obj) &gt;= <span class="number">0</span>;
}

<span class="keyword">public</span> <span class="built_in">int</span> indexOf(<span class="keyword">Object</span> obj)
{
    <span class="keyword">if</span>(obj == <span class="keyword">null</span>)
    {
        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)
            <span class="keyword">if</span>(elementData[i] == <span class="keyword">null</span>)
                <span class="keyword">return</span> i;

    } <span class="keyword">else</span>
    {
        <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">size</span>; j++)
            <span class="keyword">if</span>(*obj.equals(elementData[j])*)
                <span class="keyword">return</span> j;

    }
    <span class="keyword">return</span> -<span class="number">1</span>;
} 
</code></pre><p>多用反编译查看原理，才能了解其底层 以便更好的优化和操作List.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>java list remove(Object) removeAll(Collection&lt;?&gt; collection)先看看API介绍<br><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1ewef5213sg]]>
    </summary>
    
      <category term="List" scheme="http://blog.chen777.com/tags/List/"/>
    
      <category term="java" scheme="http://blog.chen777.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java-sort排序问题]]></title>
    <link href="http://blog.chen777.com/2015/09/23/java-sort/"/>
    <id>http://blog.chen777.com/2015/09/23/java-sort/</id>
    <published>2015-09-23T03:54:20.000Z</published>
    <updated>2015-09-23T07:49:26.743Z</updated>
    <content type="html"><![CDATA[<p>前言：前一阵子接到这样的一个需求修改排序的时候，如果修改其中一个排序，其他的都顺序排列。<br><img src="http://ww2.sinaimg.cn/large/0063lLoQgw1ewce9w7oyvj30fz099771.jpg" alt=""></p>
<p>例如，修改id=328排序为3的改为排序1，则变成如图：<img src="http://ww3.sinaimg.cn/large/0063lLoQgw1ewcecgsd9aj30g1096770.jpg" alt=""></p>
<p>思路：首先把需要修改的id=328的数据从list中remove,然后<em>Collections.sort(list);</em>重新排序，再把拿出来的id=328的数据插入相应的位置。然后for循环设置顺序</p>
<p>先说sort方法：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscribeDTO</span> <span class="keyword">implements</span> <span class="title">Serializable</span>,<span class="title">Comparable</span>&lt;<span class="title">SubscribeDTO</span>&gt;</span>{
    @Override
    <span class="keyword">public</span> <span class="keyword">int</span> compareTo(SubscribeDTO o) {
        <span class="keyword">if</span>(<span class="keyword">this</span>.<span class="keyword">order</span> == o.getOrder()){
            <span class="keyword">if</span>(o.getUpdateDate()!=<span class="keyword">null</span>){
                <span class="keyword">return</span> (<span class="keyword">int</span>) (o.getUpdateDate().getTime() - <span class="keyword">this</span>.updateDate.getTime());
            }<span class="keyword">else</span>{
                <span class="keyword">return</span> -<span class="number">1</span>;
            }
        }<span class="keyword">else</span>{
            <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">order</span> - o.getOrder();
        }
    }
}
</code></pre><p>在看action代码：</p>
<pre><code><span class="label">for</span> (<span class="keyword">SubscribeDTO </span><span class="keyword">subscribeDTO </span>: <span class="keyword">subList) </span>{
        <span class="preprocessor">if</span>(<span class="keyword">subscribeDTO.getId().equals(id)){
</span>            <span class="keyword">subscribeDTO.setOrder(order);
</span>            <span class="keyword">subscribDTO1=subscribeDTO;
</span>            <span class="keyword">subList.remove(subscribeDTO);
</span>            <span class="keyword">break;
</span>        }
    }

    Collections.sort(<span class="keyword">subList);
</span>    <span class="preprocessor">if</span>(order&lt;<span class="number">=0</span>){
        <span class="keyword">subList.add(0, </span><span class="keyword">subscribDTO1);
</span>    }<span class="preprocessor">else</span> <span class="preprocessor">if</span>(order&gt;<span class="label">=subList</span>.size()+<span class="number">1</span>){
        <span class="keyword">subList.add(subList.size(), </span><span class="keyword">subscribDTO1);
</span>    }<span class="preprocessor">else</span>{
        <span class="keyword">subList.add(order-1, </span><span class="keyword">subscribDTO1);
</span>    }

    for(int i = <span class="number">0</span><span class="comment">; i &lt; subList.size();i++)</span>
    {
        <span class="keyword">subList.get(i).setOrder(i+1);
</span>    }
</code></pre><p>这样就实现了图2所示的例子;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前言：前一阵子接到这样的一个需求修改排序的时候，如果修改其中一个排序，其他的都顺序排列。<br><img src="http://ww2.sinaimg.cn/large/0063lLoQgw1ewce9w7oyvj30fz099771.jpg" alt=""></p>
<]]>
    </summary>
    
      <category term="sort" scheme="http://blog.chen777.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo遇到的问题]]></title>
    <link href="http://blog.chen777.com/2015/09/22/hexo-question/"/>
    <id>http://blog.chen777.com/2015/09/22/hexo-question/</id>
    <published>2015-09-22T07:05:50.000Z</published>
    <updated>2015-09-23T03:53:25.328Z</updated>
    <content type="html"><![CDATA[<p>搭建hexo走了许多弯路，弯路走了很多，人也变弯了<br><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1ewb8vpqwuhj301s01sweb.jpg" alt=""><br>今天归纳一下，借鉴：<a href="http://blog.csdn.net/wx_962464/article/details/44786929" target="_blank" rel="external">http://blog.csdn.net/wx_962464/article/details/44786929</a><br>next主题的设定：<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">http://theme-next.iissnan.com/theme-settings.html</a><br>说说我蠢哭的事情，让各位客官高兴高兴吧。</p>
<p>搭建的时候大家都说站点配置文件加入xxxx，我一直不知道是那个配置文件，后来墨迹了十几分钟在另外的博客截图才看到是此_config.yml,然后终于找到的配置文件心里十万匹草利马奔腾，劳资终于找到了，哈哈哈，然后next主题我刚进来的时候是繁体的，这让强迫症的我要死，然后去next主题看，照着弄，就是不对。后来百度错误，原来是没在冒号后面加空格，擦。</p>
<p>然后最近在研究怎么备份，因为hexo始终在本地，如果我换了地方 我改如何继续使用，诶，可怜的我到现在也没有研究出个123，好希望人来支持我(原谅我对git的不理解，搞了很久还是有问题).if you want to help me,you can call QQ 280385556! 3ks</p>
<p>总结一下：照着文档弄博客的时候，好着急，想一口吃一个大胖子，然后着急弄，很多其实博主提到了，我错了无数遍终于看到了这句话。诶。欲速则不达啊。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>搭建hexo走了许多弯路，弯路走了很多，人也变弯了<br><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1ewb8vpqwuhj301s01sweb.jpg" alt=""><br>今天归纳一下，借鉴：<a href="ht]]>
    </summary>
    
      <category term="hexo" scheme="http://blog.chen777.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[fastJson]]></title>
    <link href="http://blog.chen777.com/2015/09/21/fastJson/"/>
    <id>http://blog.chen777.com/2015/09/21/fastJson/</id>
    <published>2015-09-21T01:21:12.000Z</published>
    <updated>2015-09-28T03:49:59.006Z</updated>
    <content type="html"><![CDATA[<p>Fastjson是一个Java语言编写的JSON处理器。<br>1.遵循<a href="http://json.org标准，为其官方网站收录的参考实现之一。" target="_blank" rel="external">http://json.org标准，为其官方网站收录的参考实现之一。</a><br>2.功能强大，支持JDK的各种类型，包括基本的JavaBean、Collection、Map、Date、Enum、泛型。<br>3.无依赖，不需要例外额外的jar，能够直接跑在JDK上。<br>4开源,使用Apache License 2.0协议开源。<a href="http://code.alibabatech.com/wiki/display/FastJSON/Home" target="_blank" rel="external">http://code.alibabatech.com/wiki/display/FastJSON/Home</a></p>
<p>下载地址：<br><a href="http://www.oschina.net/news/58783/fastjson-1-2-4" target="_blank" rel="external">http://www.oschina.net/news/58783/fastjson-1-2-4</a></p>
<p>我的使用场景：<br>由于我是对象嵌套对象，然后在JS里面把json对象转换为json字符串，使用JSON.stringify()方法。然后后台使用JSON.parseObject(String text, Class clazz),把JSON文本parse为JavaBean。</p>
<p>先看bean的结构:<br><strong>topicDTO:</strong></p>
<pre><code><span class="keyword">private</span> <span class="built_in">int</span> id;

<span class="keyword">private</span> <span class="keyword">String</span> topicTitle;        

<span class="keyword">private</span> <span class="keyword">String</span> content;

<span class="keyword">private</span> <span class="keyword">String</span> isBarrage;

*<span class="keyword">private</span> VoteDTO voteDTO*;

<span class="comment">/**
  *getter,setter
  *
   */</span>
</code></pre><p><strong>VoteDTO:</strong></p>
<pre><code><span class="keyword">private</span> <span class="built_in">int</span> id;

<span class="keyword">private</span> <span class="keyword">String</span> voteTitle;

<span class="keyword">private</span> <span class="keyword">String</span> imgUrl;

<span class="keyword">private</span> <span class="keyword">String</span> content;

<span class="comment">/**
  *getter,setter
  *
   */</span>
</code></pre><p><strong>js处理：</strong></p>
<pre><code><span class="keyword">var</span> topicDTO={};
<span class="comment">//and so on</span>
<span class="keyword">var</span> topicDTO.id=$(<span class="string">'#topicId'</span>).val();
<span class="keyword">var</span> topicStr=<span class="built_in">JSON</span>.stringify(topicDTO);
$.post(<span class="string">"admin/topic/saveTopic.action"</span>,
        {topicStr:topicStr}
    , <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{
        <span class="keyword">var</span> status = data.result;
        <span class="keyword">if</span> (status == <span class="string">"success"</span>) {
            $.messager.alert(<span class="string">'信息'</span>, <span class="string">'话题新增成功!'</span>, <span class="string">'info'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
                close();
            });
        } <span class="keyword">else</span> {
            $.messager.alert(<span class="string">'错误'</span>, <span class="string">'话题新增失败!'</span>, <span class="string">'error'</span>);
        }
    }, <span class="string">"json"</span>);
</code></pre><p><strong>action处理:</strong></p>
<pre><code><span class="built_in">String</span> topicStr=<span class="keyword">this</span>.getRequest().getParameter(<span class="string">"topicStr"</span>);
TopicDTO dto=<span class="built_in">JSON</span>.parseObject(topicStr, topicDTO.getClass()); 
</code></pre><p>此时前台传递的值都在dto对象中，简直是神器。</p>
<p>说说fastJson的JSON.parseObject(String text, Class clazz);<br>前台通过JSON.stringify(rows)传JSON字符串到后台</p>
<pre><code><span class="keyword">var</span> rows=$(<span class="string">'#dbgrid'</span>).datagrid(<span class="string">'getChecked'</span>);
</code></pre><p><em>切记$.post传值千万不要这么写,{</em>rows*，} </p>
<pre><code>$.post(<span class="string">"admin/hotWords/pushHotWordsTable.action"</span>,
        {<span class="string">'rows'</span>,rows}
    , <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{
    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) {
        str+=<span class="string">"&lt;tr&gt;&lt;td&gt;"</span>+data[i].hotWords+<span class="string">"&lt;/td&gt;&lt;td&gt;&lt;input type='text' value="</span>+data[i].order+<span class="string">" /&gt;&lt;/td&gt;&lt;/tr&gt;"</span>
    }
    $(<span class="string">'#hotWordsTable'</span>).append(str);
    $(<span class="string">'#hotWordsTableData'</span>).val(data);
    }, <span class="string">"json"</span>);    
</code></pre><p>不然会报错请求不到后台*.<br>后台当然是简单粗暴的:</p>
<pre><code><span class="built_in">String</span> rows= <span class="keyword">this</span>.getRequest().getParameter(<span class="string">"data"</span>);
<span class="built_in">List</span>&lt;HotWordsDTO&gt; hotWordsList =JSON.parseArray(rows, HotWordsDTO.<span class="keyword">class</span>);
</code></pre><p><img src="http://ww3.sinaimg.cn/large/0063lLoQgw1ewb8jgrkvaj30bl07kgm1.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Fastjson是一个Java语言编写的JSON处理器。<br>1.遵循<a href="http://json.org标准，为其官方网站收录的参考实现之一。" target="_blank" rel="external">http://json.org标准，为其官方网站收]]>
    </summary>
    
      <category term="json" scheme="http://blog.chen777.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java timer设置]]></title>
    <link href="http://blog.chen777.com/2015/09/18/postName/"/>
    <id>http://blog.chen777.com/2015/09/18/postName/</id>
    <published>2015-09-18T02:38:44.000Z</published>
    <updated>2015-09-21T11:54:49.047Z</updated>
    <content type="html"><![CDATA[<p>创建timer类实现接口：ServletContextListener然后在web.xml中配置listener    </p>
<pre><code><span class="keyword">public</span> <span class="keyword">static</span> final Logger LOG = LoggerFactory.make();

<span class="comment">//时间间隔(一天)  </span>
<span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">long</span> PERIOD_DAY = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;  

<span class="keyword">private</span> Timer timer;

<span class="comment">//容器摧毁</span>
<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>{
    timer.cancel();

}
</code></pre><a id="more"></a>
<pre><code><span class="comment">//容器初始化</span>
<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> </span>{
    LOG.info(<span class="string">"start timer"</span>);
    Calendar calendar = Calendar.getInstance();
      <span class="comment">/*** 定制每日2:00执行方法 ***/</span>
      calendar.<span class="built_in">set</span>(Calendar.HOUR_OF_DAY, <span class="number">2</span>);
      calendar.<span class="built_in">set</span>(Calendar.MINUTE, <span class="number">0</span>);
      calendar.<span class="built_in">set</span>(Calendar.SECOND, <span class="number">0</span>);
      Date date=calendar.getTime(); <span class="comment">//第一次执行定时任务的时间</span>

      <span class="comment">//如果第一次执行定时任务的时间 小于 当前的时间</span>
      <span class="comment">//此时要在 第一次执行定时任务的时间 加一天，以便此任务*在下个时间点执行。如果不加一天，任务会立即执行。</span>
      <span class="keyword">if</span> (date.before(<span class="keyword">new</span> Date())) {
          date = <span class="keyword">this</span>.addDay(date, <span class="number">1</span>);
      }*
    timer = <span class="keyword">new</span> Timer();  
    Task task = <span class="keyword">new</span> Task();  
    <span class="comment">//安排指定的任务在指定的时间开始进行重复的固定延迟执行。  </span>
    timer.schedule(task,date,PERIOD_DAY);  
    LOG.info(<span class="string">"start end"</span>);
}  

<span class="comment">// 增加或减少天数</span>
 <span class="function"><span class="keyword">public</span> Date <span class="title">addDay</span><span class="params">(Date date, <span class="keyword">int</span> num)</span> </span>{
  Calendar startDT = Calendar.getInstance();
  startDT.setTime(date);
  startDT.add(Calendar.DAY_OF_MONTH, num);
  <span class="keyword">return</span> startDT.getTime();
 }
<span class="comment">/** 
 * 执行内容 
 * 
 */</span>  
<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{ 
    ApplicationContext ctx= GetApplicationContext.getInstance();
    HotWordsDao hotWordsDao = (HotWordsDao) ctx.getBean(<span class="string">"hotWordsDao"</span>); 
    <span class="keyword">try</span> {
        List&lt;DailyHotWordDTO&gt; dailyList=hotWordsDao.getDailyHotWordList();
        <span class="keyword">if</span>(dailyList!=null &amp;&amp; dailyList.size()&gt;<span class="number">0</span>){
            hotWordsDao.insertHotWords(dailyList);
        }
    } <span class="keyword">catch</span> (Exception e) {
        e.printStackTrace();
    }
}

    <span class="comment">//获得注解的hotWordsDao</span>
    <span class="keyword">public</span> <span class="keyword">class</span> GetApplicationContext {
    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> ApplicationContextHolder {  
        <span class="comment">// 单例变量  </span>
        <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext AC = <span class="keyword">new</span> FileSystemXmlApplicationContext(  
                <span class="string">"classpath:applicationContext-*.xml"</span>);  
    }  


    <span class="comment">// 私有化的构造方法，保证外部的类不能通过构造器来实例化。  </span>
    <span class="function"><span class="keyword">private</span> <span class="title">GetApplicationContext</span><span class="params">()</span> </span>{  


    }  


    <span class="comment">// 获取单例对象实例  </span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getInstance</span><span class="params">()</span> </span>{  
        <span class="keyword">if</span> (ApplicationContextHolder.AC == null) {  
            ApplicationContextHolder.AC = <span class="keyword">new</span> FileSystemXmlApplicationContext(  
                    <span class="string">"classpath:applicationContext-*.xml"</span>);  
        }  
        <span class="keyword">return</span> ApplicationContextHolder.AC;  
    }  
}
</code></pre><p>web.xml中配置listener：<br><code>&lt;listener&gt;&lt;listener-class&gt;com.inveno.ccs.Timer.TimerManager&lt;listener-class&gt;&lt;/listener&gt;</code></p>
<p>总结：功能开发完成了，在完成的时候有几个地方遇到了问题:<br>1.获取不到hotWordsDao，然后折腾半天，终于搞定。<br>2.只要是服务重启就会调用task，这样业务就产生问题，然后我百度找了一个判断。</p>
<p>定时任务其实有很多，也很灵活，spring quartz/timer等等。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>创建timer类实现接口：ServletContextListener然后在web.xml中配置listener    </p>
<pre><code><span class="keyword">public</span> <span class="keyword">static</span> final Logger LOG = LoggerFactory.make();

<span class="comment">//时间间隔(一天)  </span>
<span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">long</span> PERIOD_DAY = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;  

<span class="keyword">private</span> Timer timer;

<span class="comment">//容器摧毁</span>
<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>{
    timer.cancel();

}
</code></pre>]]>
    
    </summary>
    
      <category term="timer" scheme="http://blog.chen777.com/tags/timer/"/>
    
      <category term="timer" scheme="http://blog.chen777.com/categories/timer/"/>
    
  </entry>
  
</feed>
